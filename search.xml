<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Of Studies]]></title>
    <url>%2F2018%2F01%2FOf-Studies%2F</url>
    <content type="text"><![CDATA[王佐良译文谈读书 读书足以怡情，足以傅采，足以长才。其怡情也，最见于独处幽居之时；其博采也，最见于高谈阔论之中；其长才也，最见于处世判事之际。练达之士虽能分别处理细事或一一判别枝节，然纵观统筹、全局策划，则舍好学深思者莫属。读书费时过多易惰，文采藻饰太盛则矫，全凭条文断事乃学究故态。读书补天然之不足，经验又补读书之不足，盖天生才干犹如自然花草，读书然后知如何修剪移接；而书中所示，如不以经验范之，则又大而无当。有一技之长者鄙读书，无知者羡读书，唯明智之士用读书，然书并不以用处告人，用书之智不在书中，而在书外，全凭观察得之。读书时不可存心诘难作者，不可尽信书上所言，亦不可只为寻章摘句，而应推敲细思。书有可浅尝者，有可吞食者，少数则须咀嚼消化。换言之，有只须读其部分者，有只须大体涉猎者，少数则须全读，读时须全神贯注，孜孜不倦。书亦可请人代读，取其所作摘要，但只限题材较次或价值不高者，否则书经提炼犹如水经蒸馏，淡而无味矣。 读书使人充实，讨论使人机智，笔记使人准确。因此不常做笔记者须记忆特强，不常讨论者须天生聪颖，不常读书者须欺世有术，始能无知而显有知。读史使人明智，读诗使人灵秀，数学使人周密，科学使人深刻，伦理学使人庄重，逻辑修辞之学使人善辨：凡有所学，皆成性格。人之才智但有滞碍，无不可读适当之书使之顺畅，一如身体百病，皆可借相宜之运动除之。滚球利睾肾，射箭利胸肺，漫步利肠胃，骑术利头脑，诸如此类。如智力不集中，可令读数学，盖演算须全神贯注，稍有分散即须重演；如不能辨异，可令读经院哲学，盖是辈皆吹毛求疵之人；如不善求同，不善以一物阐证另一物，可令读律师之案卷。如此头脑中凡有缺陷，皆有特药可医。 廖运范译文论读书 读书能给人乐趣、文雅和能力。人们独居或退隐的时候，最能体会到读书的乐趣；谈话的时候，最能表现出读书的文雅；判断和处理事务的时候，最能发挥由读书而获得的能力。那些有实际经验而没有学识的人，也许能够一一实行或判断某些事物的细微末节，但对于事业的一般指导、筹划与处理，还是真正有学问的人才能胜任。耗费过多的时间去读书便是迟滞，过分用学问自炫便是矫揉造作，而全凭学理判断一切，则是书呆子的癖好。学问能美化人性，经验又能充实学问。天生的植物需要人工修剪，人类的本性也需要学问诱导，而学问本身又必须以经验来规范，否则便太迂阔了。 技巧的人轻视学问，浅薄的人惊服学问，聪明的人却能利用学问。因为学问本身并不曾把它的用途教给人，至于如何去应用它，那是在学问之外、超越学问之上、由观察而获得的一种聪明呢！读书不是为着要辩驳，也不是要盲目信从，更不是去寻找谈话的资料，而是要去权衡和思考。 有些书只需浅尝，有些书可以狼吞，有些书要细嚼慢咽，慢慢消化。也就是说，有的书只需选读，有的书只需浏览，有的书却必须全部精读。有些书不必去读原本，读读它们的节本就够了，但这仅限于内容不大重要的二流书籍：否则，删节过的往往就像蒸馏水一样，淡而无味。 读书使人渊博，论辨使人机敏，写作使人精细。如果一个人很少写作，他就需要有很强的记忆力；如果他很少辩论，就需要有机智；如果他很少读书，就需要很狡猾，对于自己不懂的事情，假装知道。 历史使人聪明，诗歌使人富于想象，数学使人精确，自然哲学使人深刻，伦理学使人庄重，逻辑学和修辞学使人善辩。总之，读书能陶冶个性。不仅如此，读书并且可以铲除一切心理上的障碍，正如适当的运动能够矫治身体上的某些疾病一般。例如，滚球有益于肾脏；射箭有益于胸肺；散步有益于肠胃；骑马有益于头脑等等。因此，假若一个人心神散乱，最好让他学习数学，因为在演算数学题目的时候，一定得全神贯注，如果注意力稍一分散，就必须得再从头做起。假若一个人拙于辨别差异，就让他去请教那些演绎派的大师们，因为他们正是剖析毫发的人。假若一个人心灵迟滞，不能举一反三，最好让他去研究律师的案件。所以每一种心理缺陷，都有一种特殊的补救良方。 孙有中译文论学习 学习可以作为消遣，作为装点，也可以增进才能。其为消遣之用，主在独处、归休之时；为装点，则在高谈阔论之中；为才能，则在明辨是非、深谋远虑之间；因为专于一技者可以操持甚或判断一事一物，而唯有博学之士方能纵观全局，通权达变。 过度沉溺于学习是怠惰；过度炫耀学问是华而不实；食书不化乃书生之大疾。学习可以完善天性，并通过经验得以完善自身；因为天生之才犹如天然之草木，尚需通过学习加以修整；而纸上学位未免空谈，除非由经验加以约束。 聪颖者鄙视学习，愚鲁者羡慕学习，明智者利用学习；学习本身并不教人如何运用；唯有观察可以带来超越学习的智慧。 读书不为争论长短，不为轻信盲从，也不为高谈阔论，而旨在衡情度理。 有些书可以浅尝辄止，有些书可以生吞，而有少数书应该细嚼慢咽，融会贯通；换言之，有些书可以阅读，但不必谨小慎微；而有少数书应该悉心通读，刻苦研习。有些书可以请人代读，也可以读其节选；但这只限于那些不够重要的论述和粗制滥造的书籍；否则，经过提炼的书犹如经过提炼的水一样，淡而无味。 读书使人充实，老论使人机智，笔记使人严谨；因此，假若一个人很少做笔记，那他需要有超人的记忆；假若他很少讨论，那他需要天资聪颖；而假若他很少读书，那他需要有充分的狡诈掩饰自己的无知。 读史使人明智，读诗使人聪颖，算数使人缜密，自然哲学使人深刻，伦理使人庄重，逻辑与修辞使人善辨。 总之，学习造就性格；不尽如此，心智中任何障碍可以通过恰当的学习来疏通。这正如身体上的疾病可以通过恰当的锻炼来消除：滚球有益于腰肾，射箭有益于胸肺，慢步有益于肠胃，骑马有益于大脑，等等。因此，假若有人甚至懒散，那就让他学习算术，因为在演算中，注意力稍有分散，他就必须从头做起；假若他的智慧不足以辨别差异，那就让他学习经院哲学家，因为他们善于吹毛求疵；而假若他不擅处理事务，不能触类旁通，那就让他学习律师的案例。因此，心智上的每一种缺陷都可能有专门的药方。 原文Sir Francis Bacon (1561-1626) was a philosopher and a statesman as well as a man of letters -– a renaissance man of his time. He wrote important literary and philosophical works and was a major contributor to modern scientific thought. His Essays (published sporadically between 1597 and 1625) incorporate elements of all three disciplines and are considered his chief contribution to literature. What is given below is one such essay and the Chinese version that follows it is considered one of the best so far that can do justice to the original. Francis BaconOf Studies Of Studies Studies serve for delight, for ornament, and for ability. Their chief use for delight is in privateness and retiring; for ornament, is in discourse; and for ability, is in the judgment and disposition of business. For expert men can execute, and perhaps judge of particulars, one by one; but the general counsels, and the plots and marshaling of affairs, come best from those that are learned. To spend too much time in studies is sloth; touse them too much for ornament is affectation; to make judgment wholly by their rules is the humor of a scholar. They perfect nature, and are perfected by experience:for natural abilities are like natural plants that need pruning by study; and studies themselves do give forth directions too much at large, except they bebounded in by experience. Crafty men contemn studies, simple men admire them, and wise men use them, for they teach not their own use, but that is awisdom without them, and above them, won by observation. Read not to contradict and confute, nor to believe and take for granted, nor to find talk and discourse, but to weigh and consider. Some books are to be tasted, others to be swallowed,and some few to be chewed and digested;that is, some books are to be read onlyin parts; others to be read, but not curiously; and some few to be read wholly,and with diligence and attention. Some books also may be read by deputy, and extracts made of them by others, but that would be only in the less important arguments, and the meaner sort of book;else distilled books are like common distilled waters, flashy things. Reading maketh a full man, conference a ready man, and writing an exact man. And therefore, if a man write little, he had need have a great memory; if he confer little, he had need have a present wit;and if he read little, he had need have much cunning, to seem to know that he doth not. Histories make men wise; poets, witty; the mathematics,subtle; natural philosophy, deep; moral, grave; logic and rhetoric, able tocontend.Abeunt studia in mores. Nay, there is no stond or impediment in the wit, but may be wrought out by fitstudies, like as diseases of the body may have appropriate exercises. Bowling is good for the stone and reins, shooting for the lungs and breast, gentle walking for the stomach, riding for the head, and the like. So if a man’s wit be wandering, let him study the mathematics; for in demonstrations, if his wit be called away never so little,he must begin again. If his wit be not apt to distinguish or find differences,let him study the schoolmen, for they are cumini sectores. If he be not apt to beat over matters and tocall up one thing to prove and illustrate another, let him study the lawyers’cases. So every defect of the mind may have a special receipt. except they be: except they should be maketh:old usemakes had need have: would require to have; ought to have if a man’s wit be wandering: if a man’s wit should be wandering Abeunt studia in mores:Latinfrom Ovid,Heroides, XV, 83: Studies pass into the character. cymini sectores:Latinpeople who pay too much attention to details 来源：https://baike.baidu.com/item/Of%20Studies/5687574?fr=aladdin]]></content>
      <categories>
        <category>书山有路</category>
        <category>译文</category>
        <category>经典</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[测试杂谈]]></title>
    <url>%2F2018%2F01%2F%E6%B5%8B%E8%AF%95%E6%9D%82%E8%B0%88%2F</url>
    <content type="text"><![CDATA[测试日常测试这个行业经常会被吐槽到”不就是点点点嘛”，这时候我一般都会补充到”嗯，有计划有规律的点点点”。毕竟selenium自动化脚本也得模拟点击，搞性能测试-模拟用户点点点，搞安全测试-模拟黑客点点点。感受不到技术的深度，做的好坏不能引起重视。但这个看似可有可无的职业却一直在发展，人才市场的需求也在不断地增长，为什么？是我们的项目需要一个背锅人？不，是因为使用者对我们的产品有要求。而我们测试促进了产品最大程度的接近这个要求。So，与其自怨自艾英雄无用武之地，不如花更多时间去思考如何把工作做好，即使是深受吐槽的点点点。 以下是引用自知乎的一段话，很明确地阶段化了我们的测试工作 从测试中遇到问题采取的行动来看，我观察到的测试人员能达到的层次大概有这么几个级别： 开一个bug 查找一些额外的资料如设计文档和历史，确定这是一个问题，然后给出详细的bug重现步骤 对重现步骤做一些精炼，确定能够重现bug的最少步骤；可能的话，将重现步骤做自动化 尝试通过研究代码确认问题所在 尝试给出一个fix 对错误的原因进行分析，提出一些标准化的方法来检测出类似的问题，比如stress，fuzzing等等 能够对标准化的测试流程定义对应的数据分析方法，可以保证开发和项目主管都能从中得到需要的信息来掌控质量状况。 大多数情况下我们都停留在2阶段并对3阶段展望，而且不得不承认当项目紧张起来的时候，测试空间被压缩，于是就只简单的”开一个bug”。如果作为开发，忙活了大段时间，结果迎来的是杂乱不堪的各种bug，谁的心情又会好呢？这时候通常就会进入到甩锅环节，可对项目却没一点帮助。那么我们测试该怎么做，才算是有帮助呢？我整理了一下个人经历和看过的一些测试书籍提炼了一些可能有帮助的点，以供参考。 如何规划测试时间一般项目开始的时候，我们会有一个计划来估计测试时间，用来规范项目开始后的测试进度。通常都是参考开发的时间来制定，但仍然有其它因素需要考虑进去，例如借鉴之前完成的项目、衡量软件的复杂度、了解需求所解决的问题及其要达到的程度。 软件开发的不确定性往往会打乱我们的项目进度。这种不确定性可能来源于难以深度解读用户的需求，技术人员所掌握的技能有限，甚至是市场的变幻等等。一旦发生这种不确定，改设计、改需求都是必然的。而我们的测试时间也不会得到预留，时间被压缩，匆匆在deadline之前完成任务。要保证测试完成度，一定要有一个测试时间最小值。 就单拿执行用例来举个例子，可以通过用例步骤和该用例所需要测试的环境来做工作量的预估。假设用例每一步平均用时20s，一个用例平均6步左右，那么执行一个用例就120s(2min)。若所测版本有600个用例，在不被任何情况打断的条件下得花1200min也就是20小时。而一天的工作中完全在执行用例的时间顶多5小时，所以可能得4天才能执行完这600个用例，还不能有阻碍测试的情况。 想要规划好时间，真得团队负责人有丰富的经验，还要了解手下的那一批人。大改需求还要会约法三章，要么硬着头皮上，要么不上再加个版本的时间来改。强行改出来的产品只会更不尽如人意。 需求不明确怎么办？需求不明甚至没有，是现今互联网公司相当常见的一个问题。不说巧妇难为无米之炊，因为你必须，所以你可以。这里推荐两个解决方法： 问。直接找相关负责人问，有产品问产品，没产品问开发。问一下这个软件应该如何工作。问一下这个软件如何处理数据。问一下这个软件如何处理错误。 看。直接看源代码，运行应用程序，毕竟真到了得问开发的程度了，那就八仙过海各显神通吧。通过打断点、调试和Ctrl+Shift+F10 ，让程序跑起来，自己看应用是如何运作的。 通常来说，多数测试更了解业务功能，问起来就相对容易，但不定有可以解答的人啊。能看懂代码一定会是一个硬性要求。看不懂就找开发负责人，早早规划好测试人员的培训。 怎样保证测试工作的进行一个好的测试策略为团队提供了愿景，帮助每个人决定什么测试活动是最重要的以及如何去应用不同种类的测试。 这个策略包括测试的种类、进程和测试时测试团队会采用什么方法。它包括对风险的预估以帮助团队决定错误最有可能发生在哪里或者某些组件是否可能需要更加全面彻底的测试。 测试策略确定了测试活动中的什么是最重要的，明确了测试团队对应不同种类的测试应该采用的方法。而且，策略也包括了项目的风险评估，预测功能中最有可能发生错误的地方，和该对哪些组件进行更加全面彻底的测试。测试策略通常也包括了对测试团队的培训，已满足测试进行中执行测试所要求掌握的知识和技能。 测试用例粒度的掌握测试用例的测试过程通常可以一步完成，有时需要连续的几步。通常会给出期望的结果或现象。除此之外，还可以给出如下信息： 测试用例ID 测试用例描述 测试步骤或执行次序 相关依赖 测试类别 负责人 是否为自动化测试 测试完成后还可以追加或完善如下信息： 是否通过 备注 大型测试用例还可能包括前提状态及相关描述。书面格式的测试用例还应含有填写实际测试结果的空间。 创建好的测试用例是一个困难的过程。即使一个错误就可以毁掉测试用例的意图。一些易出问题的领域如下： 步骤缺乏 会造成不能准确地重现。 太多细节 虽然提供具体的信息很重要，但是不必要的字词或冗长的解释，会使测试用例难以遵循。 行话太多 不要以为运行测试用例的人都知道所有你写的缩略语、代号和缩写。 不明确的检验标准 如果执行用例后，不清楚测试是否通过或失败，那测试用例是毫无用处的。 缺陷不该被用来做绩效度量通过分析缺陷数据可以掌握的 所测试功能的复杂性 开发人员编程能力 规格完整性 缺陷预防与缺陷发现 报告的及时性 若使用缺陷作为绩效度量需要解决的问题： 缺陷报告中问题的严重程度和优先级是如何分布的？ 功能缺陷与简单的用户界面缺陷算一样的数量吗？ 花时间追踪一个关键问题（如数据丢失，内存泄漏）并使之得到解决，这能说明没有达到预期或业绩表现差吗？如果是，那为什么要有协助开发人员排解疑难问题的团队合作的政策？ 如何划分缺陷等级？不同缺陷等级之间又如何评比？ 每一次评比，最少得发现多少缺陷？而发现多少缺陷又算是超常发挥了呢？ 发现了大量的缺陷可能表明测试人员做的很好，或者它可能意味着开发人员编写的代码很差。反之，如果一个测试人员找到很少的缺陷，这可能是一个迹象:表明他做得不理想，也可能意味着他正在测试具有较低的缺陷密度高质量的代码。所以关键是怎样解读数据，这也意味着可能需要额外的个案调查。 例如，如果一个测试人员没有报告很多缺陷，看一下功能区以确定是什么原因造成缺陷数量低。如果其他用户（客户、开发，Beta测试用户）在该功能区找到缺陷，该测试人员的低缺陷数可能会有问题。当然，如果进一步的调查后，您确定功能区的测试不错，没有多少缺陷，这当然就不该怪测试人员了。 从我工作的角度上来看，真要有标准来考量测试的话，那么从产品、开发和用户的反馈来考量是比较得当的。 一些个人感想本来只是想写一下读书感悟的，但是这样写下来真的感觉很乱，所以自己最后再补充一些个人理解，主要是讲自动化测试方面的感受。 早期做测试的时候，无脑粉技术，觉得自动化就是厉害。等着自己着手去了解selenium、appium等之后，发现效益很差。首先是作为测试，写这些代码本身就不容易，而且项目是理所当然的会有不同程度的改变，因此写的自动化脚本更像是一种自我安慰。也有在网上看到说自动化有啥啥啥要求，才能进行。要什么项目稳定，改动不大。。。真达到这么多要求了，这时候的自动化也相当于买个保险了。也确实老有员工说，”别总想整这些个幺蛾子，老老实实把用例执行好，不要总为了自动化而自动化，对我们的产品有什么帮助吗，没有！”但，罗列什么情况适合自动化，比较自动化的优缺点，是在做了自动化之后才需要讨论的，而不是以此相挟拒绝尝试自动化。短期来说，的确自动化测试对发现bug提供不了帮助，即使长期来看也可能收效甚微，投入这么大为了什么？不如扎实好测试的根本-方法论。这里认真想想，测试方法论的总结，难道是从大量业务中分析得来的？是不是得承认，分析代码才更能归纳出等价类边界值这样的方法。 从我的了解来看，不是嚷嚷着项目收益、自动化弊端、不要为技术而技术，只是从事测试这个行业的很多人本身就拒绝写代码看代码，不然人家早就去做开发去了。还有些人是希望稳定，害怕变化，已经疲于学习新的东西了。更何况，测试领域牵扯之广，让我们有了更多的职业发展的可能性。不用好为人师的帮别人决定做什么好，相信自己同时也尊重别人的选择。]]></content>
      <categories>
        <category>软件测试</category>
        <category>测试基础</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[软件测试-wikipedia]]></title>
    <url>%2F2017%2F12%2F%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95-wikipedia%2F</url>
    <content type="text"><![CDATA[软件测试的经典定义是：在规定的条件下对程序进行操作，以发现程序错误，衡量软件质量，并对其是否能满足设计要求进行评估的过程。 软件测试有许多方法，但对复杂的产品运行有效测试不仅仅是研究过程，更是创造并严格遵守某些呆板步骤的大事。测试的其中一个定义：为了评估而质疑产品的过程；这里的“质疑”是测试员试着对产品做的事，而产品以测试者脚本行为反应作为回答。虽然大部分测试的质疑过程不外乎回顾、检查，然而“测试”这个词意味着产品动态分析──让产品流畅运行。程序质量可能，而且通常会，随系统不同而有差异；不过某些公认特性是共通的：功能性、可靠性、易用性、效率、可 维护性以及可移植性。请引用至ISO标准ISO 9126有更详尽的说明。 测试方法黑盒测试黑箱测试（black-box testing），也称黑盒测试，是软件测试方法，测试应用程序的功能，而不是其内部结构或运作。测试者不需具备应用程序的代码、内部结构和编程语言的专门知识。测试者只需知道什么是系统应该做的事，即当键入一个特定的输入，可得到一定的输出。测试案例是依应用系统应该做的功能，照规范、规格或要求等设计。测试者选择有效输入和无效输入来验证是否正确的输出。 此测试方法可适合大部分的软件测试，例如集成测试（integration testing）以及系统测试（system testing）。 白盒测试白箱测试（white-box testing，又称透明盒测试glass box testing、结构测试structural testing等）是一个测试软件的方法，测试应用程序的内部结构或运作，而不是测试应用程序的功能（即黑箱测试）。在白箱测试时，以编程语言的角度来设计测试案例。测试者输入数据验证数据流在程序中的流动路径，并确定适当的输出，类似测试电路中的节点。 白箱测试可以应用于单元测试（unit testing）、集成测试（integration testing）和系统的软件测试流程，可测试在集成过程中每一单元之间的路径，或者主系统跟子系统中的测试。尽管这种测试的方法可以发现许多的错误或问题，它可能无法检测未使用部分的规范。 测试阶段单元测试单元测试是对软件组成单元进行测试，其目的是检验软件基本组成单位的正确性，测试的对象是软件设计的最小单位：函数。 集成测试集成测试也称综合测试、组装测试、联合测试，将程序模块采用适当的集成策略组装起来，对系统的接口及集成后的功能进行正确性检测的测试工作。其主要目的是检查软件单位之间的接口是否正确，集成测试的对象是已经经过单元测试的模块。 系统测试系统测试主要包括功能测试、界面测试、可靠性测试、易用性测试、性能测试。 功能测试主要针对包括功能可用性、功能实现程度（功能流程&amp;业务流程、数据处理&amp;业务数据处理）方面测试。 回归测试回归测试指在软件维护阶段，为了检测代码修改而引入的错误所进行的测试活动。回归测试是软件维护阶段的重要工作，有研究表明，回归测试带来的耗费占软件生命周期的1/3总费用以上。 与普通的测试不同，在回归测试过程开始的时候，测试者有一个完整的测试用例集可供使用，因此，如何根据代码的修改情况对已有测试用例集进行有效的复用是回归测试研究的重要方向，此外，回归测试的研究方向还涉及自动化工具，面向对象回归测试，测试用例优先级，回归测试用例补充生成等。 测试类型功能测试按照测试软件的各个功能划分进行有条理的测试，在功能测试部分要保证测试项覆盖所有功能和各种功能条件组合。 系统测试对一个完整的软件以用户的角度来进行测试，系统测试和功能测试的区别是，系统测试利用的所有测试数据和测试的方法都要模拟成和用户的实际使用环境完全一样，测试的软件也是经过系统集成以后的完整软件系统，而不是在功能测试阶段利用的每个功能模块单独编译后生成的可执行程序。 负载测试对软件在各种特殊条件，特殊环境下能否正常运行和软件的性能进行测试。特殊条件一般指的是软件规定的最大值，最小值，以及在超过最大、最小值条件下的测试。特殊环境一般指的是软件运行的机器处于CPU高负荷，或是网络高负荷状态下的测试，根据软件的不同，特殊环境也有过不同。 性能测试性能测试是对软件性能的评价。简单的说，软件性能衡量的是软件具有的响应及时度能力。因此，性能测试是采用测试手段对软件的响应及时性进行评价的一种方式。根据软件的不同类型，性能测试的侧重点也不同。 压力测试压力测试的通常判断准则： 系统能够恢复。 压力过程中不要有明显性能下降。 测试周期尽管各个组织之间的流程存在差异，但是还有一个典型的测试周期。以下是在瀑布开发模式下各组织通用的流程。通常其它开发模式也是采取相同的做法，只是没有这么清晰明了。 需求分析：测试应该从软件开发生命周期的需求阶段开始。在设计阶段，测试人员的工作是确定设计的哪些功能是可测试的，以及测试工作中需要用到的参数。 测试计划：测试策略，测试计划。由于许多活动将在测试期间进行，所以需要一个计划。 测试开发：测试程序，测试场景，测试用例，测试数据集以及用于测试软件的测试脚本。 测试执行：测试人员根据计划和测试文档使用软件，然后向开发团队报告发现的任何错误。 测试报告：测试完成后，测试人员完成软件的度量，并对测试工作进行最终报告，以确定测试的软件是否准备好发布。 测试结果分析(缺陷分析)：通常是开发团队来完成，以决定缺陷的分派，修复，拒绝或延期处理。 缺陷重新测试：一旦开发团队处理了缺陷，测试团队就会重新进行测试。 回归测试：通常会为新增、修改和修复的那一部分软件创建一个小的测试程序，以确保最近的一次发布不会破坏以前的功能并且整个产品仍然正确的工作。 测试关闭：一旦测试符合结束标准，诸如获取关键输出，经验教训，结果，日志，与项目相关的文档等活动将被记录下来并用作未来项目的参考。 注：对中文维基百科内容有所修改]]></content>
      <categories>
        <category>软件测试</category>
        <category>测试基础</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网络大局观]]></title>
    <url>%2F2017%2F12%2F%E7%BD%91%E7%BB%9C%E5%A4%A7%E5%B1%80%E8%A7%82%2F</url>
    <content type="text"><![CDATA[我们的网络随着科技的发展，我们的文字已经不仅仅活跃在纸张上了，各种电子设备可以用来显示文本及与文本相关的内容。就像装订书籍一样，也需要将这些文本连接起来，这种连接的方式我们称为超链接 ，这样的文档我们称为超文本 ，这样装订成册的书籍我们之间需要互相传阅，于是便形成了万维网 。 超文本（英语：Hypertext）是一种在电脑显示器或其他电子设备，用以显示文本及与文本相关的内容，其中的文字包含有可以链接到其他字段或者文档的超链接，允许从当前阅读位置直接切换到超链接所指向的文字。 所以，从这样的角度看，万维网 更像是个图书馆。我们需要通过图书管理员URL (统一资源定位符)来找到自己想要借阅的书籍，而去取到对应的书籍我们需要有一个约定俗成的方法，即HTTP (超文本传输协议)，当然我们也得知道每本这样的书主要是由HTML (超文本标记语言)完成的。 万维网（英语：World Wide Web），亦作“WWW”、“Web”，是一个由许多互相链接的超文本组成的系统，通过互联网访问。 万维网是信息时代发展的核心，也是数十亿人在互联网上进行交互的主要工具。网页主要是文本文件格式化和超文本标记语言（HTML）。除了格式化文字之外，网页还可能包含图片、视频、声音和软件组件，这些组件会在用户的网页浏览器中呈现为多媒体内容的连贯页面。 而科技却不仅仅局限于文本，图片、视频、声音等与文本相关的各种资源通过HTML 、CSS 、JavaScript 这些技术一起构成了网页 。网页的合成体称为网站，一个网站的开始点称为首页，而我们则通过浏览器来访问这些网站。 提供万维网这样类似的服务，并以一组标准的网络TCP/IP协议族 将所有的服务连接起来形成一个庞大网络，也就是互联网 ，像对等网络、文件分享、以及网络协议通话技术都由其提供。 互联网或国际网（英语： The Internet），是网络与网络之间所串连成的庞大网络，这些网络以一组标准的网络TCP/IP协议族相连，连接全世界几十亿个设备，形成逻辑上的单一巨大国际网络。它是由从地方到全球范围内几百万个私人的、学术界的、企业的和政府的网络所构成，通过电子，无线和光纤网络技术等等一系列广泛的技术联系在一起。这种将计算机网络互相联接在一起的方法可称作“网络互联”，在这基础上发展出覆盖全世界的全球性互联网络称互联网，即是互相连接一起的网络。 互联网并不等同万维网（WWW），万维网只是一个基于超文本相互链接而成的全球性系统，且是互联网所能提供的服务其中之一。互联网带有范围广泛的信息资源和服务，例如相互关系的超文本文件，还有万维网的应用，支持电子邮件的基础设施，对等式网络，文件共享，以及网络协议通话技术。 网络的基础计算机与网络设备要互相通信，双方就必须基于相同的方法。比如，如何探测到通信目标、由哪一边先发起通信、使用哪种语言进行通信、怎样结束通信等规则都需要事先确定。不同的硬件、操作系统之间的通信，所有的这一切都需要事先确定，都需要一种规则。而我们就把这种规则称为协议(protocol)。 协议中存在各式各样的内容。从电缆的规格到IP地址的选定方法、寻找异地用户的方法、双方建立通信的顺序，以及Web页面显示需要处理的步骤，等等。像这样把与互联网相关联的协议集合起来总称为TCP/IP。 互联网协议族（英语：Internet Protocol Suite，缩写IPS）是一个网络通信模型，以及一整个网络传输协议家族，为互联网的基础通信架构。 它常被通称为TCP/IP协议族（英语：TCP/IP Protocol Suite，或TCP/IP Protocols），简称TCP/IP。因为该协议家族的两个核心协议：TCP（传输控制协议）和IP（网际协议），为该家族中最早通过的标准。 由于在网络通讯协议普遍采用分层的结构，当多个层次的协议共同工作时，类似计算机科学中的堆栈，因此又被称为TCP/IP协议栈（英语：TCP/IP Protocol Stack）。 这些协议最早发源于美国国防部（缩写为DoD）的ARPA网项目，因此也被称作DoD模型（DoD Model）。 毕竟网络通信不是像传话那样简单，嚎两声就可以了。若只有一个网络协议来统筹，某个地方需要改变设计时，就必须把所有部分整体替换掉。所以我们需要协议层次化，整个通信网络的任务，可以划分成不同的功能区块，即所谓的层级。所有这些协议都在相应的RFC文档 中讨论及标准化。用于互联网的协议可以比照TCP/IP参考模型 进行分类。 TCP/IP参考模型 ： 应用层 (application layer)：该层包括所有和应用程序协同工作，利用基础网络交换应用程序专用的数据的协议。 该层常见的协议有：HTTP、FTP、DNS等 传输层 (transport layer)：传输层对上层应用层，提供处于网络连接中的两台计算机之间的数据传输。 该层常见的协议有：TCP、UDP等 网络互连层 (internet layer)：网络层规定了通过怎样的传输路线到达对方计算机，并把数据包传送给对方。即寻址。 该层常见的协议有：IP、ARP等 网络接口层 (link layer)：用来处理连接网络的硬件部分。 该层常见的协议有：以太网、Wi-Fi等 利用TCP/IP协议族进行网络通信时，会通过分层顺序与对方进行通信。发送端从应用层往下走，接收端则往应用层往上走。 协议的实现HTTP(超文本传输协议) HTTP是一个客户端（用户）和服务器（网站）请求和应答的标准（TCP）。通过使用网页浏览器、网络爬虫或者其它的工具，客户端发起一个HTTP请求到服务器上指定端口（默认端口为80）。我们称这个客户端为用户代理程序（user agent）。应答的服务器上存储着一些资源，比如HTML文件和图像。我们称这个应答服务器为源服务器（origin server）。在用户代理和源服务器中间可能存在多个“中间层”，比如代理服务器或者隧道（tunnel）。 一、请求与响应那么我们首先了解下HTTP协议的请求与响应具体是如何表现的 通常，由HTTP客户端发起一个请求，创建一个到服务器指定端口（默认是80端口）的TCP连接。HTTP服务器则在那个端口监听客户端的请求。一旦收到请求，服务器会向客户端返回一个状态，比如”HTTP/1.1 200 OK”，以及返回的内容，如请求的文件、错误消息、或者其它信息。 我们访问github，上去抓个包，便可以得到类似以下信息： 123456789101112客户端GET / HTTP/1.1Host: github.comConnection: keep-alivePragma: no-cacheCache-Control: no-cacheUpgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.90 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8Accept-Encoding: gzip, deflate, brAccept-Language: zh-CN,zh;q=0.8Cookie: ...... 12345678910111213服务器HTTP/1.1 200 OKDate: Thu, 21 Dec 2017 11:41:36 GMTContent-Type: text/html; charset=utf-8Transfer-Encoding: chunkedServer: GitHub.comStatus: 200 OKCache-Control: no-cacheVary: X-PJAXX-UA-Compatible: IE=Edge,chrome=1Set-Cookie: ......（紧跟着一个空行，并且由HTML格式的文本组成了GitHub的主页） 请求报文: 请求方法、请求URI、协议版本 请求首部字段(除Host外，均可选) 空行 内容实体(可选) 响应报文: 协议版本、状态码、状态码原因短语 响应首部字段(可选) 空行 内容实体(可选) 二、请求方法为了区分获取资源的方式，HTTP协议定义了几种方法来操作指定的资源，下面介绍最为常见的五种。 Method 安全性 幂等性 说明 GET √ √ 向指定资源发出”显示”请求，一般是查询资源。 POST × × 向指定资源提交数据，请求服务器进行处理。可创建和更新资源。 PUT × √ 向指定资源位置上传其最新内容，即替换资源。 PATCH × √ 将局部修改应用到资源。 DELETE × √ 请求服务器删除所标识的资源。 安全性：任意多次对同一资源操作，都不会导致资源的状态变化。 幂等性：任意多次对同一资源操作，对资源的改变是一样的。 注意：安全性在协议规定中是指请求方法对指定资源操作会产生副作用，即是否会改变资源状态。会导致资源状态变化的，称为”非安全”方法，例如POST，PUT及DELETE，这样的请求会修改、创建甚至是删除指定资源。 不过通常来说我们在HTTP协议中使用最多的方法便是GET和POST了，所以这里主要展示GET和POST的区别，这也是面试中最常被问到的内容： GET POST 返回按钮/重新加载 无副作用 数据将被重新提交(浏览器应该提醒用户数据即将被重新提交) 书签 可以加书签 不可以加书签 缓存 可以被缓存 不可以被缓存 编码类型 application/x-www-form-urlencoded只能进行url编码 application/x-www-form-urlencoded or multipart/form-data.用multipart对二进制数据进行编码。支持多种编码方式 历史记录 参数保留在浏览器历史记录中 参数不保留在浏览器历史记录中 限制数据长度 是的，在发送数据时，GET方法将数据添加到URL; 而URL的长度是有限的（最大URL长度是2048个字符） 对数据长度没有限制 限制数据类型 只允许ASCII码 对数据类型没有限制，二进制数据也是可以使用的。 安全性 与POST相比，GET的安全性较低，因为发送的数据是URL的一部分。发送密码或其他敏感信息时切勿使用GET！ POST比GET更安全，因为这些参数不存储在浏览器历史记录或Web服务器日志中 能见度 所有人都可以在URL中读到数据 数据不会显示在URL中 注意：这里的安全性指的是信息泄露或是被窃取的可能性。 三、响应状态码所有HTTP响应的第一行都是状态行，依次是当前HTTP版本号，3位数字组成的状态代码，以及描述状态的短语，彼此由空格分隔。 状态代码的第一个数字代表当前响应的类型： 1xx消息——请求已被服务器接收，继续处理 2xx成功——请求已成功被服务器接收、理解、并接受 3xx重定向——需要后续操作才能完成这一请求 4xx请求错误——请求含有词法错误或者无法被执行 5xx服务器错误——服务器在处理某个正确请求时发生错误 虽然 RFC 2616中已经推荐了描述状态的短语，例如”200 OK”，”404 Not Found”，但是WEB开发者仍然能够自行决定采用何种短语，用以显示本地化的状态描述或者自定义信息。 四、HTTP状态管理Cookie ：指某些网站为了辨别用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。 因为HTTP协议是无状态的，即服务器不知道用户上一次做了什么，这严重阻碍了交互式Web应用程序的实现。在典型的网上购物场景中，用户浏览了几个页面，买了一盒饼干和两瓶饮料。最后结帐时，由于HTTP的无状态性，不通过额外的手段，服务器并不知道用户到底买了什么，所以Cookie就是用来绕开HTTP的无状态性的“额外手段”之一。服务器可以设置或读取Cookies中包含信息，借此维护用户跟服务器会话中的状态。 会话（session）是一种持久网络协议，在客户端和服务器端之间创建关联，从而起到交换数据包的作用机制。 会话(session)往往使用Cookie来管理，例如我们的登录认证。 首先，客户通过POST方法将请求发送给服务器。 这时候服务器会发放识别用户的Session ID，通过验证从客户端发送过来的登录信息进行身份认证，然后把用户认证状态与Session ID绑定后记录在服务端。向客户端返回响应时，会在首部字段Set-Cookie内写入Session ID(为了防止被盗或被猜出，Session ID的值应该是一个既不会重复，又不容易被找到规律以仿造的字符串并且服务器端也需要进行有效期的管理，保证其安全性)。 客户端接收到从服务器端发来的Session ID后，会将其作为Cookie保存在本地。下次向服务器发送请求时，浏览器会自动发送Cookie，所以Session ID也随之发送到服务器。服务器端可通过验证接收到的Session ID识别用户和其认证状态。 因为cookie和session都有保持HTTP状态的功能，所以他们两个也常常被拿出来比较。 简单来说主要区别： session:存储在服务器，更安全，当关闭浏览器后会话同样也会关闭。 cookie:存储在客户端，不安全，在到期和被删除前将一直有效。 TCP(传输控制协议) TCP是一种面向连接的、可靠的、基于字节流的传输层通信协议。 TCP将大块数据分割成已报文段为单位的数据包，并给数据包提供可靠的传输服务。IP协议的作用是把各种数据包传送给对方。 应用层向TCP层发送用于网间传输的、用8位字节表示的数据流，然后TCP把数据流分区成适当长度的报文段（通常受该计算机连接的网络的数据链路层的最大传输单元（MTU）的限制）。之后TCP把结果包传给IP层，由它来通过网络将包传送给接收端实体的TCP层。 TCP为了保证不发生丢包，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。然后接收端实体对已成功收到的包发回一个相应的确认（ACK）；如果发送端实体在合理的往返时延（RTT）内未收到确认，那么对应的数据包就被假设为已丢失将会被进行重传。TCP用一个校验和函数来检验数据是否有错误；在发送和接收时都要计算校验和。 TCP传输的时候主要会说到三次握手与四次挥手，若在握手过程中某个阶段莫名中断，TCP协议会再次以相同的顺序发送相同的数据包。 三次握手: C(SYN)：洞拐洞拐，我是洞幺。这里有份急电要传给你。 S(SYN，ACK)：洞幺洞幺，我是洞拐。已确认可以接受电报。 C(ACK)：收到，OVER。着手发电报。 四次挥手: C(FIN)：电报发送完毕，请求关闭(等待回复FIN_WAIT_1) S(ACK)：收到，需要确认信息是否传输完毕，请稍等。(确认数据传输完成CLOSE_WAIT) S(FIN)：已确认可以关闭(等待确认LAST_ACK) C(ACK)：收到，OVER。(完成关闭TIME_WAIT) 补充：第三次握手失败会怎样？ 当客户端收到服务端的SYN+ACK应答后，其状态变为ESTABLISHED，并会发送ACK包给服务端，准备发送数据了。如果此时ACK在网络中丢失，过了超时计时器后，那么Server端会重新发送SYN+ACK包，重传次数默认是5次。如果重传指定次数到了后，仍然未收到ACK应答，那么一段时间后，Server自动关闭这个连接。但是Client认为这个连接已经建立，如果Client端向Server写数据，Server端将以RST包响应，方能感知到Server的错误。 IP(网际协议) IP（英语：Internet Protocol）的任务是仅仅根据源主机和目的主机的地址传送数据。为此目的，IP定义了寻址方法和数据报的封装结构。 这里先介绍IP的寻址，如何将IP地址分配给各个终端节点，以及如何划分和组合子网。 IP地址（英语：IP Address），是分配给网络上使用网际协议IP的设备的数字标签。常见的IP地址分为IPv4与IPv6两大类。 目前最主要的仍是IPv4，而IPv6还在积极部署中。 最初，一个IP地址被分成两部分：网络识别码在地址的高位字节中，主机识别码在剩下的部分中。 为了克服这个限制，在随后出现的分类网络中，地址的高位字节被重定义为网络的类(Class)。这个系统定义了五个类别：A、B、C、D和E。A、B和C类有不同的网络类别长度，剩余的部分被用来识别网络内的主机，这就意味着每个网络类别有着不同的给主机编址的能力。D类被用于多播地址，E类被留作将来使用。 由于分类网络的可拓展性不足且会给路由设备增加额外的负担，无类别域间路由（CIDR）正式地取代了分类网络。 无类别域间路由(CIDR)是一个用于给用户分配IP地址以及在互联网上有效地路由IP数据包的对IP地址进行归类的方法。 这个解释起来就超纲了，但还是在这挖个坑，填不填看缘了。 注：IP地址也分公网和内网，由网络地址转换(NAT)实现。 注意：虽然DNS和URI是应用层的协议，但是因其与IP地址关联甚大，于是乎就写在IP协议下面了。 域名系统DNS我们很难通过输入一组纯数字来区分需要访问的IP地址，所以就有了方便人类记忆的域名(由字母搭配数字)。可计算机不擅长处理名称，这就需要有域名到IP地址之间的解析服务，即DNS。这样我们只需要输入易于记忆的域名，然后通过DNS解析为IP地址进行访问。 123456域名划分：.com 顶级域名baidu.com 一级域名www.baidu.com 二级域名bbs.baidu.com 二级域名tieba.baidu.com 二级域名 tips:www.作为域名前缀起到主域名与子域名区分的作用 统一资源标志符可如果访问地址数据量大、资源丰富的话，我们该如何去取到想要的资源呢？这便是URI(统一资源标识符)的作用了。 URI可被视为定位符（URL），名称（URN）或两者兼备。统一资源名（URN）如同一个人的名称，而统一资源定位符（URL）代表一个人的住址。换言之，URN定义某事物的身份，而URL提供查找该事物的方法。 用于标识唯一书目的ISBN系统是一个典型的URN使用范例。例如，ISBN 0-486-27557-4( \ 0-486-27557-4 )无二义性地标识出莎士比亚的戏剧《罗密欧与朱丽叶》的某一特定版本。为获得该资源并阅读该书，人们需要它的位置，也就是一个URL地址。在类Unix操作系统中，一个典型的URL地址可能是一个文件目录，例如file:///home/username/RomeoAndJuliet.pdf。该URL标识出存储于本地硬盘中的电子书文件。因此，URL和URN有着互补的作用。 我们在浏览器上输入的网址具体解析如下： http:// user:passwd@ www.example.com :80 /dir/index.html ?uid=1 协议名 认证信息(可选) 服务器地址 服务器端口号 文件路径 查询字符串 tips: 格式化文本与纯文本相对，具有风格、排版等信息，如颜色、式样(黑体、斜体等)、字体尺寸、特性(如超链接)等。 格式化是指对磁盘或磁盘中的分区（partition）进行初始化的一种操作，这种操作通常会导致现有的磁盘或分区中所有的文件被清除。 有些人往往会弄不清在计算机中出现的“位”和Byte,KB,MB等有何关系，而它们的关系是，8位等于一字节Byte，即8bit=1B 。32位处理器每次处理 4Byte(32bit)，同理，64位处理器每次处理 8Byte(64bit) 在 ASCII 编码中，一个英文字母字符存储需要1个字节。在 GB 2312 编码或 GBK 编码中，一个汉字字符存储需要2个字节。在UTF-8编码中，一个英文字母字符存储需要1个字节，一个汉字字符储存需要3到4个字节。]]></content>
      <categories>
        <category>网络通信</category>
        <category>协议</category>
      </categories>
      <tags>
        <tag>网络基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Raspbbery Pi 使用手册]]></title>
    <url>%2F2017%2F10%2FRaspbbery-Pi-%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C%2F</url>
    <content type="text"><![CDATA[注：推荐裸板，自己动手丰衣足食。官方文档 购买配置最小可选 树莓派板子必选 (选最新最便宜的) SD卡必选 建议容量8G以上(起码也买个16G的吧)，TF卡又叫micro SD卡，现在一般都用TF卡 读卡器必选 如果有别的方式烧录可以不买，比如说买的烧录好的(不推荐) 网线 推荐 尤其是在没显示屏的情况下，当然设置好wifi连接后就没必要了 电源 推荐听说树莓派最佳电源是2A，一般的安卓手机电源满足不了 其他可选 散热片 推荐 通常3片装 保护壳 推荐 风扇 可选 HDMI / DVI显示屏 可选 买不起显示屏，通过电脑wifi远程连接 视频线及转接口 可选 鼠标、键盘等 可选 我的使用环境是笔记本win10加wifi远程连接，所以买的是：板子、TF卡、读卡器、电源、散热片、保护壳及网线 提示：连接上树莓派后关机不建议热插拔，命令行sudo poweroff 烧录篇 下载系统，推荐下载raspbian系统。有DESKTOP 桌面版和LITE 最简安装。 Windows系统，下载烧录软件Win32DiskImager然后把TF卡插入读卡器，选好Image File和Device直接点Write就行了，其它选项可以忽略。 注 :重新烧录的情况下不要写入boot盘。 重点 烧录完成后，打开名为boot 的盘符，创建一个名为ssh的文件夹。 这里是因为截至2016年11月发布的版本，默认情况下，Raspbian已禁用SSH服务器。 TF卡插入树莓派，网线 连接路由器，接通电源，红灯常亮就表示OK了 (注意：这里pi还没有设置WIFI连接，没有网线是不行滴，除非你有显示屏可以连接使用) 查找树莓派IP地址，不推荐端口扫描软件 笔记本按WIN+R键输入CMD回车，在命令行输入arp -a 。 这时候一般会有两个IP，不确定的话，可以再输ipconfig查看本机IP，那另一个就是树莓派的IP了。 再不然，拔了树莓派的网线，输arp -a少了的那个就是树莓派的IP了。 查看路由器的客户端列表。我是小米路由器，手机上点开小米WiFi一目了然。 知道树莓派的IP后，就可以使用SSH连接了。使用PuTTY 、xshell 等都可以。这里使用免费的PuTTY ，连接上后，账号默认是pi，密码默认是raspberry (centos7 默认账号：root，密码:centos)。登录成功后会看到命令行提示符 pi@raspberrypi ~ $ 设置篇设置WIFI命令行设置WIFI 获取可连接的网络sudo iwlist wlan0 scan 注：很多时候附近可连接的网络比较多，建议指令存储到某个临时文件中 生成加密连接wpa_passphrase &quot;testing&quot; &quot;testingPassword&quot; 复制加密连接内容至sudo nano /etc/wpa_supplicant/wpa_supplicant.conf 123wpa_passphrase "testing" "testingPassword" &gt;&gt; /etc/wpa_supplicant/wpa_supplicant.conf# 上面那个命令需要root权限，用下面那个wpa_passphrase "testing" "testingPassword" | sudo tee -a /etc/wpa_supplicant/wpa_supplicant.conf &gt; /dev/null 这时文件中内容大概是这样： 12345network=&#123; ssid="testing" #连接的WIFI名称 #psk="testingPassword" #连接的WIFI密码 psk=131e1e221f6e06e3911a2d11ff2fac9182665c004de85300f9cac208a6a80531 &#125; 注释部分可自行删除 查看是否连接完成，先让配置生效sudo wpa_cli reconfigure ，输入ifconfig wlan0 可查看wifi的连接(连网线的情况下是查看不了滴)。 多网络连接 修改配置sudo nano /etc/wpa_supplicant/wpa_supplicant.conf 12345678910111213network=&#123; ssid="HomeOneSSID" psk="passwordOne" priority=1 #优先级 id_str="homeOne" #连接标识&#125;network=&#123; ssid="HomeTwoSSID" psk="passwordTwo" priority=2 id_str="homeTwo"&#125; 注： 设置完成后重启即可，也可以等配置完了再重启连接，注意WIFI连接后IP地址可能会不同于有线连接的地址，需要重新设置连接的IP。 设置静态IP地址 sudo vim /etc/dhcpcd.conf 登录配置工具在SSH控制台输入sudo raspi-config 注：一般来说第一步都是拓展系统空间，但是我进入配置工具时并没有这个选项(应该是新版已经默认拓展了)。然后找了找，原来在7 Advanced Options 中，我们选择ExpandFilesystem 更改密码(Change User Password) 密码是需要修改的，毕竟默认密码是公开的，所以这里我们选择Change User Password 按流程输入两次密码就OK了 注：激活root 在命令行界面输入sudo passwd root 输入两遍密码后，再在命令行输sudo passwd --unlock root ，root用户便可以使用了。 命令su - 输入设置的密码，便可切换为root用户。 本地化(Localisation Options) tips :键盘敲击选项的首字母可以快速定位到以该字母为首的选项旁。 时区本地化：Localisation Options –&gt;Change Timezone –&gt;Asia –&gt; shanghai wifi设置：Change Wi-fi Country –&gt;China 语言本地化：好好学英语，不设置。但是还是记录一下该怎么做。 首先获取中文字体，命令行sudo apt-get install ttf-wqy-zenhei ，然后命令sudo raspi-config 进入配置页面，选择Localisation Options -Change Locale 翻到最后一页再向上找zh_CN. UTF-8 敲空格 * 号标记选中后回车，再选择zh_CN，中文本地化设置就是这些步骤了。 VNC因为我使用的是LITE版没有桌面，所以略。。。(命令行用习惯了，桌面太多余) 启用VNC 服务器 先更新到最新版本的VNC Connect 12sudo apt-get updatesudo apt-get install realvnc-vnc-server realvnc-vnc-viewer 命令行输入sudo raspi-config ，找到Interfacing Options ，在VNC选项中enable 选yes 修改VNC配置文件 1sudo nano /etc/init.d/vncserver 12345678910111213141516171819202122232425262728293031323334353637#!/bin/sh### BEGIN INIT INFO# Provides: vncserver# Required-Start: $local_fs# Required-Stop: $local_fs# Default-Start: 2 3 4 5# Default-Stop: 0 1 6# Short-Description: Start/stop vncserver### END INIT INFO # More details see:# http://www.penguintutor.com/linux/vnc ### Customize this entry# Set the USER variable to the name of the user to start vncserver underexport USER='pi'### End customization required eval cd ~$USER case "$1" in start) # 启动命令行。此处自定义分辨率、控制台号码或其它参数。 su $USER -c '/usr/bin/vncserver -depth 16 -geometry 1024x768 :1' echo "Starting VNC server for $USER " ;; stop) # 终止命令行。此处控制台号码与启动一致。 su $USER -c '/usr/bin/vncserver -kill :1' echo "vncserver stopped" ;; *) echo "Usage: /etc/init.d/vncserver &#123;start|stop&#125;" exit 1 ;;esacexit 0 FTPsudo apt-get install vsftpd sudo service vsftpd start pure-ftpd 这是官方推荐的ftp server 配置VIM命令行sudo apt-get install -y vim 然后我很鸡贼的从github上拷贝了个星星数很高的vim配置文档上来 更换树莓派镜像源中国科学技术大学 http://mirrors.ustc.edu.cn/raspbian/raspbian/ 清华大学 http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ 大连东软信息学院源 http://mirrors.neusoft.edu.cn/raspbian/raspbian/ 重庆大学源 http://mirrors.cqu.edu.cn/Raspbian/raspbian/ 阿里云镜像 http://mirrors.aliyun.com/raspbian/raspbian/ 对应中国地图，一般离你家近的网速快些，嫌麻烦直接用阿里就行 二、树莓派修改软件源的方法 编辑/etc/apt/sources.list文件 sudo vim /etc/apt/sources.list。 原文内容 12deb http://archive.raspbian.org/raspbian/ stretch main contrib non-free rpideb-src http://archive.raspbian.org/raspbian/ stretch main contrib non-free rpi deb: Debian软件包格式的拓展名 deb-src: 软件包源码文件(一般不看源码此项可注释掉) 更改其连接为国内源即可，例 deb http://mirrors.aliyun.com/raspbian/raspbian/ stretch main contrib non-free rpi 编辑此文件后，命令行sudo apt-get update，更新软件列表。 安装node.js安装Node.js 6: 12curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -sudo apt-get install -y nodejs Alternatively, for Node.js 8: 12curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -sudo apt-get install -y nodejs Optional: install build tools To compile and install native addons from npm you may also need to install build tools: 1sudo apt-get install -y build-essential 安装gitgit官网 1sudo apt-get install git]]></content>
      <categories>
        <category>运维</category>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F10%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
