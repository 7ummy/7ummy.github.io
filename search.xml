<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[锦瑟]]></title>
    <url>%2F2018%2F01%2F%E9%94%A6%E7%91%9F%2F</url>
    <content type="text"><![CDATA[锦瑟 唐代：李商隐 锦瑟无端五十弦，一弦一柱思华年。庄生晓梦迷蝴蝶，望帝春心托杜鹃。沧海月明珠有泪，蓝田日暖玉生烟。此情可待成追忆，只是当时已惘然。 以前一直没有读懂这首诗的意思，偶然间通过搜索引擎又再回顾了一遍。才发现，”此情可待”一直被我简单的理解为：追忆逝水年华，伤感于拥有一切美好却不自知，视其为平常，不去珍惜，辜负了青春。 再看这首诗，细细读过一遍后，却又有种别样的感受。 诗的解读有很多种，但是不可否认的是，这是一首回忆之作。我一直认为好的作品是不需要深度解读的，那就破坏了那种韵味。 首先，我们得了解一下几个关键词的意思。 注释 ： 锦瑟：装饰华美的瑟。美称。通常二十五弦。 无端：没来由的。 “思”字变读去声（sì），律诗中不许有一连三个平声的出现。 华年：美好的年华，指少年。 庄生梦蝶、杜鹃啼血、沧海珠泪、良玉生烟四个典故。 可待：怎会等到，同”岂待”。 只是：就是、正是，同”止是”。 个人感觉”可待”和”只是”是诗人在创作时的一个小技巧，将两种意思混淆到了一个词中，就像今天我们说”我去”，这样的方式。 该诗的译文网上一搜一大把，这里就不再复制粘贴一遍了，也因为要突出重点。 细细品这首诗，我脑中想象出了这样一副场景：一个人靠着窗边，风中携着锦瑟的声音，双眼逐渐失去焦距，便沉浸在了自己的回忆中。突然，”铮”的一声，将自己拉回了现实，不禁有些恍惚，感慨间便回了屋。 So，这首《锦瑟》的故事顺序应该是这样的：声音、宁静，这并不冲突，因为可以勾起回忆。回忆内容不可描述，但是呢是这样一种感觉：看到月光洒在茫茫大海上，珍珠也闪烁着似乎有泪水一般。看到太阳照射在蓝田上，云仙雾绕好似玉石上升起了青烟。仙境一般，画面在变化，思考却已经静止了。然后，”铮”，次元破灭，景色变成了自家庭院。是，锦瑟断弦。这瑟声是有种魔力，庄生梦蝶、杜鹃啼血一般，能牵引人的灵魂回到那时美好的岁月。虽，恍如隔世，不是今天回忆才有这种感觉，当时的我就已经有这样的感觉了。 就像想起十几岁时，懵懵懂懂的场景，现在感觉还是很懵懵懂懂。真是，回忆勾人呐！ 注：认真读这首诗，尝试解读，会有一种很棒的魂穿体验，而且，穿的还是以前的自己。]]></content>
      <categories>
        <category>书山有路</category>
        <category>咬文嚼字</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[hexo-写作须知]]></title>
    <url>%2F2018%2F01%2Fhexo-%E5%86%99%E4%BD%9C%E9%A1%BB%E7%9F%A5%2F</url>
    <content type="text"><![CDATA[自定义配置文件1$ hexo --config custom.yml 自定义配置文件的路径，执行后将采用custom.yml 中的配置，而不再使用 _config.yml。 主题配置最佳实现 要求使用hexo3版本或以上。 在站点目录中source/_data 文件夹下创建名为next.yml 的文件。(自行创建_data文件夹，如果它不存在的话。) 将站点目录和主题目录下config.yml 的内容复制到next.ynl 文件中去。 使用参数–config source/_data/next.yml 来启动、生成或部署网站，举个栗子：hexo d -g –config source/_data/next.yml 。 资源文件夹对于那些想要更有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上的人来说，Hexo也提供了更组织化的方式来管理资源。这个稍微有些复杂但是管理资源非常方便的功能可以通过将 config.yml文件中的 post_asset_folder 选项设为 true 来打开。 _config.yml post_asset_folder: true 当资源文件管理功能打开后，Hexo将会在你每一次通过 hexo new [layout] 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个 markdown 文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。 草稿发表草稿 刚刚提到了 Hexo 的一种特殊布局：draft，这种布局在建立时会被保存到 source/_drafts 文件夹，您可通过 publish 命令将草稿移动到 source/_posts 文件夹，该命令的使用方式与 new 十分类似，您也可在命令中指定 layout 来指定布局。以上为标准操作，实际上直接将文件Ctrl+x 剪切到发表的文件夹下(source/_post )也可以达到发表效果，只是缺少对应布局效果。 $ hexo publish [layout] &lt;title&gt; 显示草稿 $ hexo --draft 显示 source/_drafts 文件夹中的草稿文章。 Front-Mattercategory 层级分类 tag 同级分类 如果你不想你的文章被处理，你可以将 Front-Matter 中的layout: 设为 false 。 Please use in the post to control excerpt accurately. 标签插件标签插件和 Front-matter 中的标签不同，它们是用于在文章中快速插入特定内容的插件。 引言在文章中插入引言，可包含作者、来源和标题。 别号： quote {% blockquote [author[, source]] [link] [source_link_title] %} content {% endblockquote %} 引用网络上的文章 {% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %} Every interaction is both precious and an opportunity to delight. {% endblockquote %} Every interaction is both precious and an opportunity to delight. Seth GodinWelcome to Island Marketing 文本居中引用&lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt; &lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt; &lt;blockquote class=&quot;blockquote-center&quot;&gt;blah blah blah&lt;/blockquote&gt; &lt;!-- 标签 方式，要求版本在0.4.5或以上 --&gt; {% centerquote %}blah blah blah{% endcenterquote %} &lt;!-- 标签别名 --&gt; {% cq %} blah blah blah {% endcq %} 效果示例： … 逢人且说三分话，未可全抛一片心。 有意栽花花不发，无心插柳柳成荫。 画虎画皮难画骨，知人知面不知心。 … Gist在文章中嵌入 Gist {% gist gist_id [filename] %} 效果示例：]]></content>
      <categories>
        <category>hexo</category>
        <category>写作</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Of Studies]]></title>
    <url>%2F2018%2F01%2FOf-Studies%2F</url>
    <content type="text"><![CDATA[王佐良译文谈读书 读书足以怡情，足以傅采，足以长才。其怡情也，最见于独处幽居之时；其博采也，最见于高谈阔论之中；其长才也，最见于处世判事之际。练达之士虽能分别处理细事或一一判别枝节，然纵观统筹、全局策划，则舍好学深思者莫属。读书费时过多易惰，文采藻饰太盛则矫，全凭条文断事乃学究故态。读书补天然之不足，经验又补读书之不足，盖天生才干犹如自然花草，读书然后知如何修剪移接；而书中所示，如不以经验范之，则又大而无当。有一技之长者鄙读书，无知者羡读书，唯明智之士用读书，然书并不以用处告人，用书之智不在书中，而在书外，全凭观察得之。读书时不可存心诘难作者，不可尽信书上所言，亦不可只为寻章摘句，而应推敲细思。书有可浅尝者，有可吞食者，少数则须咀嚼消化。换言之，有只须读其部分者，有只须大体涉猎者，少数则须全读，读时须全神贯注，孜孜不倦。书亦可请人代读，取其所作摘要，但只限题材较次或价值不高者，否则书经提炼犹如水经蒸馏，淡而无味矣。 读书使人充实，讨论使人机智，笔记使人准确。因此不常做笔记者须记忆特强，不常讨论者须天生聪颖，不常读书者须欺世有术，始能无知而显有知。读史使人明智，读诗使人灵秀，数学使人周密，科学使人深刻，伦理学使人庄重，逻辑修辞之学使人善辨：凡有所学，皆成性格。人之才智但有滞碍，无不可读适当之书使之顺畅，一如身体百病，皆可借相宜之运动除之。滚球利睾肾，射箭利胸肺，漫步利肠胃，骑术利头脑，诸如此类。如智力不集中，可令读数学，盖演算须全神贯注，稍有分散即须重演；如不能辨异，可令读经院哲学，盖是辈皆吹毛求疵之人；如不善求同，不善以一物阐证另一物，可令读律师之案卷。如此头脑中凡有缺陷，皆有特药可医。 廖运范译文论读书 读书能给人乐趣、文雅和能力。人们独居或退隐的时候，最能体会到读书的乐趣；谈话的时候，最能表现出读书的文雅；判断和处理事务的时候，最能发挥由读书而获得的能力。那些有实际经验而没有学识的人，也许能够一一实行或判断某些事物的细微末节，但对于事业的一般指导、筹划与处理，还是真正有学问的人才能胜任。耗费过多的时间去读书便是迟滞，过分用学问自炫便是矫揉造作，而全凭学理判断一切，则是书呆子的癖好。学问能美化人性，经验又能充实学问。天生的植物需要人工修剪，人类的本性也需要学问诱导，而学问本身又必须以经验来规范，否则便太迂阔了。 技巧的人轻视学问，浅薄的人惊服学问，聪明的人却能利用学问。因为学问本身并不曾把它的用途教给人，至于如何去应用它，那是在学问之外、超越学问之上、由观察而获得的一种聪明呢！读书不是为着要辩驳，也不是要盲目信从，更不是去寻找谈话的资料，而是要去权衡和思考。 有些书只需浅尝，有些书可以狼吞，有些书要细嚼慢咽，慢慢消化。也就是说，有的书只需选读，有的书只需浏览，有的书却必须全部精读。有些书不必去读原本，读读它们的节本就够了，但这仅限于内容不大重要的二流书籍：否则，删节过的往往就像蒸馏水一样，淡而无味。 读书使人渊博，论辨使人机敏，写作使人精细。如果一个人很少写作，他就需要有很强的记忆力；如果他很少辩论，就需要有机智；如果他很少读书，就需要很狡猾，对于自己不懂的事情，假装知道。 历史使人聪明，诗歌使人富于想象，数学使人精确，自然哲学使人深刻，伦理学使人庄重，逻辑学和修辞学使人善辩。总之，读书能陶冶个性。不仅如此，读书并且可以铲除一切心理上的障碍，正如适当的运动能够矫治身体上的某些疾病一般。例如，滚球有益于肾脏；射箭有益于胸肺；散步有益于肠胃；骑马有益于头脑等等。因此，假若一个人心神散乱，最好让他学习数学，因为在演算数学题目的时候，一定得全神贯注，如果注意力稍一分散，就必须得再从头做起。假若一个人拙于辨别差异，就让他去请教那些演绎派的大师们，因为他们正是剖析毫发的人。假若一个人心灵迟滞，不能举一反三，最好让他去研究律师的案件。所以每一种心理缺陷，都有一种特殊的补救良方。 孙有中译文论学习 学习可以作为消遣，作为装点，也可以增进才能。其为消遣之用，主在独处、归休之时；为装点，则在高谈阔论之中；为才能，则在明辨是非、深谋远虑之间；因为专于一技者可以操持甚或判断一事一物，而唯有博学之士方能纵观全局，通权达变。 过度沉溺于学习是怠惰；过度炫耀学问是华而不实；食书不化乃书生之大疾。学习可以完善天性，并通过经验得以完善自身；因为天生之才犹如天然之草木，尚需通过学习加以修整；而纸上学位未免空谈，除非由经验加以约束。 聪颖者鄙视学习，愚鲁者羡慕学习，明智者利用学习；学习本身并不教人如何运用；唯有观察可以带来超越学习的智慧。 读书不为争论长短，不为轻信盲从，也不为高谈阔论，而旨在衡情度理。 有些书可以浅尝辄止，有些书可以生吞，而有少数书应该细嚼慢咽，融会贯通；换言之，有些书可以阅读，但不必谨小慎微；而有少数书应该悉心通读，刻苦研习。有些书可以请人代读，也可以读其节选；但这只限于那些不够重要的论述和粗制滥造的书籍；否则，经过提炼的书犹如经过提炼的水一样，淡而无味。 读书使人充实，老论使人机智，笔记使人严谨；因此，假若一个人很少做笔记，那他需要有超人的记忆；假若他很少讨论，那他需要天资聪颖；而假若他很少读书，那他需要有充分的狡诈掩饰自己的无知。 读史使人明智，读诗使人聪颖，算数使人缜密，自然哲学使人深刻，伦理使人庄重，逻辑与修辞使人善辨。 总之，学习造就性格；不尽如此，心智中任何障碍可以通过恰当的学习来疏通。这正如身体上的疾病可以通过恰当的锻炼来消除：滚球有益于腰肾，射箭有益于胸肺，慢步有益于肠胃，骑马有益于大脑，等等。因此，假若有人甚至懒散，那就让他学习算术，因为在演算中，注意力稍有分散，他就必须从头做起；假若他的智慧不足以辨别差异，那就让他学习经院哲学家，因为他们善于吹毛求疵；而假若他不擅处理事务，不能触类旁通，那就让他学习律师的案例。因此，心智上的每一种缺陷都可能有专门的药方。 原文Sir Francis Bacon (1561-1626) was a philosopher and a statesman as well as a man of letters -– a renaissance man of his time. He wrote important literary and philosophical works and was a major contributor to modern scientific thought. His Essays (published sporadically between 1597 and 1625) incorporate elements of all three disciplines and are considered his chief contribution to literature. What is given below is one such essay and the Chinese version that follows it is considered one of the best so far that can do justice to the original. Francis BaconOf Studies Of Studies Studies serve for delight, for ornament, and for ability. Their chief use for delight is in privateness and retiring; for ornament, is in discourse; and for ability, is in the judgment and disposition of business. For expert men can execute, and perhaps judge of particulars, one by one; but the general counsels, and the plots and marshaling of affairs, come best from those that are learned. To spend too much time in studies is sloth; touse them too much for ornament is affectation; to make judgment wholly by their rules is the humor of a scholar. They perfect nature, and are perfected by experience:for natural abilities are like natural plants that need pruning by study; and studies themselves do give forth directions too much at large, except they bebounded in by experience. Crafty men contemn studies, simple men admire them, and wise men use them, for they teach not their own use, but that is awisdom without them, and above them, won by observation. Read not to contradict and confute, nor to believe and take for granted, nor to find talk and discourse, but to weigh and consider. Some books are to be tasted, others to be swallowed,and some few to be chewed and digested;that is, some books are to be read onlyin parts; others to be read, but not curiously; and some few to be read wholly,and with diligence and attention. Some books also may be read by deputy, and extracts made of them by others, but that would be only in the less important arguments, and the meaner sort of book;else distilled books are like common distilled waters, flashy things. Reading maketh a full man, conference a ready man, and writing an exact man. And therefore, if a man write little, he had need have a great memory; if he confer little, he had need have a present wit;and if he read little, he had need have much cunning, to seem to know that he doth not. Histories make men wise; poets, witty; the mathematics,subtle; natural philosophy, deep; moral, grave; logic and rhetoric, able tocontend.Abeunt studia in mores. Nay, there is no stond or impediment in the wit, but may be wrought out by fitstudies, like as diseases of the body may have appropriate exercises. Bowling is good for the stone and reins, shooting for the lungs and breast, gentle walking for the stomach, riding for the head, and the like. So if a man’s wit be wandering, let him study the mathematics; for in demonstrations, if his wit be called away never so little,he must begin again. If his wit be not apt to distinguish or find differences,let him study the schoolmen, for they are cumini sectores. If he be not apt to beat over matters and tocall up one thing to prove and illustrate another, let him study the lawyers’cases. So every defect of the mind may have a special receipt. except they be: except they should be maketh:old usemakes had need have: would require to have; ought to have if a man’s wit be wandering: if a man’s wit should be wandering Abeunt studia in mores:Latinfrom Ovid,Heroides, XV, 83: Studies pass into the character. cymini sectores:Latinpeople who pay too much attention to details 来源：https://baike.baidu.com/item/Of%20Studies/5687574?fr=aladdin]]></content>
      <categories>
        <category>书山有路</category>
        <category>译文</category>
        <category>经典</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[测试杂谈]]></title>
    <url>%2F2018%2F01%2F%E6%B5%8B%E8%AF%95%E6%9D%82%E8%B0%88%2F</url>
    <content type="text"><![CDATA[测试日常测试这个行业经常会被吐槽到”不就是点点点嘛”，这时候我一般都会补充到”嗯，有计划有规律的点点点”。毕竟selenium自动化脚本也得模拟点击，搞性能测试-模拟用户点点点，搞安全测试-模拟黑客点点点。感受不到技术的深度，做的好坏不能引起重视。但这个看似可有可无的职业却一直在发展，人才市场的需求也在不断地增长，为什么？是我们的项目需要一个背锅人？不，是因为使用者对我们的产品有要求。而我们测试促进了产品最大程度的接近这个要求。So，与其自怨自艾英雄无用武之地，不如花更多时间去思考如何把工作做好，即使是深受吐槽的点点点。 以下是引用自知乎的一段话，很明确地阶段化了我们的测试工作 从测试中遇到问题采取的行动来看，我观察到的测试人员能达到的层次大概有这么几个级别： 开一个bug 查找一些额外的资料如设计文档和历史，确定这是一个问题，然后给出详细的bug重现步骤 对重现步骤做一些精炼，确定能够重现bug的最少步骤；可能的话，将重现步骤做自动化 尝试通过研究代码确认问题所在 尝试给出一个fix 对错误的原因进行分析，提出一些标准化的方法来检测出类似的问题，比如stress，fuzzing等等 能够对标准化的测试流程定义对应的数据分析方法，可以保证开发和项目主管都能从中得到需要的信息来掌控质量状况。 大多数情况下我们都停留在2阶段并对3阶段展望，而且不得不承认当项目紧张起来的时候，测试空间被压缩，于是就只简单的”开一个bug”。如果作为开发，忙活了大段时间，结果迎来的是杂乱不堪的各种bug，谁的心情又会好呢？这时候通常就会进入到甩锅环节，可对项目却没一点帮助。那么我们测试该怎么做，才算是有帮助呢？我整理了一下个人经历和看过的一些测试书籍提炼了一些可能有帮助的点，以供参考。 如何规划测试时间一般项目开始的时候，我们会有一个计划来估计测试时间，用来规范项目开始后的测试进度。通常都是参考开发的时间来制定，但仍然有其它因素需要考虑进去，例如借鉴之前完成的项目、衡量软件的复杂度、了解需求所解决的问题及其要达到的程度。 软件开发的不确定性往往会打乱我们的项目进度。这种不确定性可能来源于难以深度解读用户的需求，技术人员所掌握的技能有限，甚至是市场的变幻等等。一旦发生这种不确定，改设计、改需求都是必然的。而我们的测试时间也不会得到预留，时间被压缩，匆匆在deadline之前完成任务。要保证测试完成度，一定要有一个测试时间最小值。 就单拿执行用例来举个例子，可以通过用例步骤和该用例所需要测试的环境来做工作量的预估。假设用例每一步平均用时20s，一个用例平均6步左右，那么执行一个用例就120s(2min)。若所测版本有600个用例，在不被任何情况打断的条件下得花1200min也就是20小时。而一天的工作中完全在执行用例的时间顶多5小时，所以可能得4天才能执行完这600个用例，还不能有阻碍测试的情况。 想要规划好时间，真得团队负责人有丰富的经验，还要了解手下的那一批人。大改需求还要会约法三章，要么硬着头皮上，要么不上再加个版本的时间来改。强行改出来的产品只会更不尽如人意。 需求不明确怎么办？需求不明甚至没有，是现今互联网公司相当常见的一个问题。不说巧妇难为无米之炊，因为你必须，所以你可以。这里推荐两个解决方法： 问。直接找相关负责人问，有产品问产品，没产品问开发。问一下这个软件应该如何工作。问一下这个软件如何处理数据。问一下这个软件如何处理错误。 看。直接看源代码，运行应用程序，毕竟真到了得问开发的程度了，那就八仙过海各显神通吧。通过打断点、调试和Ctrl+Shift+F10 ，让程序跑起来，自己看应用是如何运作的。 通常来说，多数测试更了解业务功能，问起来就相对容易，但不定有可以解答的人啊。能看懂代码一定会是一个硬性要求。看不懂就找开发负责人，早早规划好测试人员的培训。 怎样保证测试工作的进行一个好的测试策略为团队提供了愿景，帮助每个人决定什么测试活动是最重要的以及如何去应用不同种类的测试。 这个策略包括测试的种类、进程和测试时测试团队会采用什么方法。它包括对风险的预估以帮助团队决定错误最有可能发生在哪里或者某些组件是否可能需要更加全面彻底的测试。 测试策略确定了测试活动中的什么是最重要的，明确了测试团队对应不同种类的测试应该采用的方法。而且，策略也包括了项目的风险评估，预测功能中最有可能发生错误的地方，和该对哪些组件进行更加全面彻底的测试。测试策略通常也包括了对测试团队的培训，已满足测试进行中执行测试所要求掌握的知识和技能。 测试用例粒度的掌握测试用例的测试过程通常可以一步完成，有时需要连续的几步。通常会给出期望的结果或现象。除此之外，还可以给出如下信息： 测试用例ID 测试用例描述 测试步骤或执行次序 相关依赖 测试类别 负责人 是否为自动化测试 测试完成后还可以追加或完善如下信息： 是否通过 备注 大型测试用例还可能包括前提状态及相关描述。书面格式的测试用例还应含有填写实际测试结果的空间。 创建好的测试用例是一个困难的过程。即使一个错误就可以毁掉测试用例的意图。一些易出问题的领域如下： 步骤缺乏 会造成不能准确地重现。 太多细节 虽然提供具体的信息很重要，但是不必要的字词或冗长的解释，会使测试用例难以遵循。 行话太多 不要以为运行测试用例的人都知道所有你写的缩略语、代号和缩写。 不明确的检验标准 如果执行用例后，不清楚测试是否通过或失败，那测试用例是毫无用处的。 缺陷不该被用来做绩效度量通过分析缺陷数据可以掌握的 所测试功能的复杂性 开发人员编程能力 规格完整性 缺陷预防与缺陷发现 报告的及时性 若使用缺陷作为绩效度量需要解决的问题： 缺陷报告中问题的严重程度和优先级是如何分布的？ 功能缺陷与简单的用户界面缺陷算一样的数量吗？ 花时间追踪一个关键问题（如数据丢失，内存泄漏）并使之得到解决，这能说明没有达到预期或业绩表现差吗？如果是，那为什么要有协助开发人员排解疑难问题的团队合作的政策？ 如何划分缺陷等级？不同缺陷等级之间又如何评比？ 每一次评比，最少得发现多少缺陷？而发现多少缺陷又算是超常发挥了呢？ 发现了大量的缺陷可能表明测试人员做的很好，或者它可能意味着开发人员编写的代码很差。反之，如果一个测试人员找到很少的缺陷，这可能是一个迹象:表明他做得不理想，也可能意味着他正在测试具有较低的缺陷密度高质量的代码。所以关键是怎样解读数据，这也意味着可能需要额外的个案调查。 例如，如果一个测试人员没有报告很多缺陷，看一下功能区以确定是什么原因造成缺陷数量低。如果其他用户（客户、开发，Beta测试用户）在该功能区找到缺陷，该测试人员的低缺陷数可能会有问题。当然，如果进一步的调查后，您确定功能区的测试不错，没有多少缺陷，这当然就不该怪测试人员了。 从我工作的角度上来看，真要有标准来考量测试的话，那么从产品、开发和用户的反馈来考量是比较得当的。 一些个人感想本来只是想写一下读书感悟的，但是这样写下来真的感觉很乱，所以自己最后再补充一些个人理解，主要是讲自动化测试方面的感受。 早期做测试的时候，无脑粉技术，觉得自动化就是厉害。等着自己着手去了解selenium、appium等之后，发现效益很差。首先是作为测试，写这些代码本身就不容易，而且项目是理所当然的会有不同程度的改变，因此写的自动化脚本更像是一种自我安慰。也有在网上看到说自动化有啥啥啥要求，才能进行。要什么项目稳定，改动不大。。。真达到这么多要求了，这时候的自动化也相当于买个保险了。也确实老有员工说，”别总想整这些个幺蛾子，老老实实把用例执行好，不要总为了自动化而自动化，对我们的产品有什么帮助吗，没有！”但，罗列什么情况适合自动化，比较自动化的优缺点，是在做了自动化之后才需要讨论的，而不是以此相挟拒绝尝试自动化。短期来说，的确自动化测试对发现bug提供不了帮助，即使长期来看也可能收效甚微，投入这么大为了什么？不如扎实好测试的根本-方法论。这里认真想想，测试方法论的总结，难道是从大量业务中分析得来的？是不是得承认，分析代码才更能归纳出等价类边界值这样的方法。 从我的了解来看，不是嚷嚷着项目收益、自动化弊端、不要为技术而技术，只是从事测试这个行业的很多人本身就拒绝写代码看代码，不然人家早就去做开发去了。还有些人是希望稳定，害怕变化，已经疲于学习新的东西了。更何况，测试领域牵扯之广，让我们有了更多的职业发展的可能性。不用好为人师的帮别人决定做什么好，相信自己同时也尊重别人的选择。]]></content>
      <categories>
        <category>软件测试</category>
        <category>测试基础</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[软件测试-wikipedia]]></title>
    <url>%2F2017%2F12%2F%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95-wikipedia%2F</url>
    <content type="text"><![CDATA[软件测试的经典定义是：在规定的条件下对程序进行操作，以发现程序错误，衡量软件质量，并对其是否能满足设计要求进行评估的过程。 软件测试有许多方法，但对复杂的产品运行有效测试不仅仅是研究过程，更是创造并严格遵守某些呆板步骤的大事。测试的其中一个定义：为了评估而质疑产品的过程；这里的“质疑”是测试员试着对产品做的事，而产品以测试者脚本行为反应作为回答。虽然大部分测试的质疑过程不外乎回顾、检查，然而“测试”这个词意味着产品动态分析──让产品流畅运行。程序质量可能，而且通常会，随系统不同而有差异；不过某些公认特性是共通的：功能性、可靠性、易用性、效率、可 维护性以及可移植性。请引用至ISO标准ISO 9126有更详尽的说明。 测试方法黑盒测试黑箱测试（black-box testing），也称黑盒测试，是软件测试方法，测试应用程序的功能，而不是其内部结构或运作。测试者不需具备应用程序的代码、内部结构和编程语言的专门知识。测试者只需知道什么是系统应该做的事，即当键入一个特定的输入，可得到一定的输出。测试案例是依应用系统应该做的功能，照规范、规格或要求等设计。测试者选择有效输入和无效输入来验证是否正确的输出。 此测试方法可适合大部分的软件测试，例如集成测试（integration testing）以及系统测试（system testing）。 白盒测试白箱测试（white-box testing，又称透明盒测试glass box testing、结构测试structural testing等）是一个测试软件的方法，测试应用程序的内部结构或运作，而不是测试应用程序的功能（即黑箱测试）。在白箱测试时，以编程语言的角度来设计测试案例。测试者输入数据验证数据流在程序中的流动路径，并确定适当的输出，类似测试电路中的节点。 白箱测试可以应用于单元测试（unit testing）、集成测试（integration testing）和系统的软件测试流程，可测试在集成过程中每一单元之间的路径，或者主系统跟子系统中的测试。尽管这种测试的方法可以发现许多的错误或问题，它可能无法检测未使用部分的规范。 测试阶段单元测试单元测试是对软件组成单元进行测试，其目的是检验软件基本组成单位的正确性，测试的对象是软件设计的最小单位：函数。 集成测试集成测试也称综合测试、组装测试、联合测试，将程序模块采用适当的集成策略组装起来，对系统的接口及集成后的功能进行正确性检测的测试工作。其主要目的是检查软件单位之间的接口是否正确，集成测试的对象是已经经过单元测试的模块。 系统测试系统测试主要包括功能测试、界面测试、可靠性测试、易用性测试、性能测试。 功能测试主要针对包括功能可用性、功能实现程度（功能流程&amp;业务流程、数据处理&amp;业务数据处理）方面测试。 回归测试回归测试指在软件维护阶段，为了检测代码修改而引入的错误所进行的测试活动。回归测试是软件维护阶段的重要工作，有研究表明，回归测试带来的耗费占软件生命周期的1/3总费用以上。 与普通的测试不同，在回归测试过程开始的时候，测试者有一个完整的测试用例集可供使用，因此，如何根据代码的修改情况对已有测试用例集进行有效的复用是回归测试研究的重要方向，此外，回归测试的研究方向还涉及自动化工具，面向对象回归测试，测试用例优先级，回归测试用例补充生成等。 测试类型功能测试按照测试软件的各个功能划分进行有条理的测试，在功能测试部分要保证测试项覆盖所有功能和各种功能条件组合。 系统测试对一个完整的软件以用户的角度来进行测试，系统测试和功能测试的区别是，系统测试利用的所有测试数据和测试的方法都要模拟成和用户的实际使用环境完全一样，测试的软件也是经过系统集成以后的完整软件系统，而不是在功能测试阶段利用的每个功能模块单独编译后生成的可执行程序。 负载测试对软件在各种特殊条件，特殊环境下能否正常运行和软件的性能进行测试。特殊条件一般指的是软件规定的最大值，最小值，以及在超过最大、最小值条件下的测试。特殊环境一般指的是软件运行的机器处于CPU高负荷，或是网络高负荷状态下的测试，根据软件的不同，特殊环境也有过不同。 性能测试性能测试是对软件性能的评价。简单的说，软件性能衡量的是软件具有的响应及时度能力。因此，性能测试是采用测试手段对软件的响应及时性进行评价的一种方式。根据软件的不同类型，性能测试的侧重点也不同。 压力测试压力测试的通常判断准则： 系统能够恢复。 压力过程中不要有明显性能下降。 测试周期尽管各个组织之间的流程存在差异，但是还有一个典型的测试周期。以下是在瀑布开发模式下各组织通用的流程。通常其它开发模式也是采取相同的做法，只是没有这么清晰明了。 需求分析：测试应该从软件开发生命周期的需求阶段开始。在设计阶段，测试人员的工作是确定设计的哪些功能是可测试的，以及测试工作中需要用到的参数。 测试计划：测试策略，测试计划。由于许多活动将在测试期间进行，所以需要一个计划。 测试开发：测试程序，测试场景，测试用例，测试数据集以及用于测试软件的测试脚本。 测试执行：测试人员根据计划和测试文档使用软件，然后向开发团队报告发现的任何错误。 测试报告：测试完成后，测试人员完成软件的度量，并对测试工作进行最终报告，以确定测试的软件是否准备好发布。 测试结果分析(缺陷分析)：通常是开发团队来完成，以决定缺陷的分派，修复，拒绝或延期处理。 缺陷重新测试：一旦开发团队处理了缺陷，测试团队就会重新进行测试。 回归测试：通常会为新增、修改和修复的那一部分软件创建一个小的测试程序，以确保最近的一次发布不会破坏以前的功能并且整个产品仍然正确的工作。 测试关闭：一旦测试符合结束标准，诸如获取关键输出，经验教训，结果，日志，与项目相关的文档等活动将被记录下来并用作未来项目的参考。 注：对中文维基百科内容有所修改]]></content>
      <categories>
        <category>软件测试</category>
        <category>测试基础</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网络大局观]]></title>
    <url>%2F2017%2F12%2F%E7%BD%91%E7%BB%9C%E5%A4%A7%E5%B1%80%E8%A7%82%2F</url>
    <content type="text"><![CDATA[我们的网络随着科技的发展，我们的文字已经不仅仅活跃在纸张上了，各种电子设备可以用来显示文本及与文本相关的内容。就像装订书籍一样，也需要将这些文本连接起来，这种连接的方式我们称为超链接 ，这样的文档我们称为超文本 ，这样装订成册的书籍我们之间需要互相传阅，于是便形成了万维网 。 超文本（英语：Hypertext）是一种在电脑显示器或其他电子设备，用以显示文本及与文本相关的内容，其中的文字包含有可以链接到其他字段或者文档的超链接，允许从当前阅读位置直接切换到超链接所指向的文字。 所以，从这样的角度看，万维网 更像是个图书馆。我们需要通过图书管理员URL (统一资源定位符)来找到自己想要借阅的书籍，而去取到对应的书籍我们需要有一个约定俗成的方法，即HTTP (超文本传输协议)，当然我们也得知道每本这样的书主要是由HTML (超文本标记语言)完成的。 万维网（英语：World Wide Web），亦作“WWW”、“Web”，是一个由许多互相链接的超文本组成的系统，通过互联网访问。 万维网是信息时代发展的核心，也是数十亿人在互联网上进行交互的主要工具。网页主要是文本文件格式化和超文本标记语言（HTML）。除了格式化文字之外，网页还可能包含图片、视频、声音和软件组件，这些组件会在用户的网页浏览器中呈现为多媒体内容的连贯页面。 而科技却不仅仅局限于文本，图片、视频、声音等与文本相关的各种资源通过HTML 、CSS 、JavaScript 这些技术一起构成了网页 。网页的合成体称为网站，一个网站的开始点称为首页，而我们则通过浏览器来访问这些网站。 提供万维网这样类似的服务，并以一组标准的网络TCP/IP协议族 将所有的服务连接起来形成一个庞大网络，也就是互联网 ，像对等网络、文件分享、以及网络协议通话技术都由其提供。 互联网或国际网（英语： The Internet），是网络与网络之间所串连成的庞大网络，这些网络以一组标准的网络TCP/IP协议族相连，连接全世界几十亿个设备，形成逻辑上的单一巨大国际网络。它是由从地方到全球范围内几百万个私人的、学术界的、企业的和政府的网络所构成，通过电子，无线和光纤网络技术等等一系列广泛的技术联系在一起。这种将计算机网络互相联接在一起的方法可称作“网络互联”，在这基础上发展出覆盖全世界的全球性互联网络称互联网，即是互相连接一起的网络。 互联网并不等同万维网（WWW），万维网只是一个基于超文本相互链接而成的全球性系统，且是互联网所能提供的服务其中之一。互联网带有范围广泛的信息资源和服务，例如相互关系的超文本文件，还有万维网的应用，支持电子邮件的基础设施，对等式网络，文件共享，以及网络协议通话技术。 网络的基础计算机与网络设备要互相通信，双方就必须基于相同的方法。比如，如何探测到通信目标、由哪一边先发起通信、使用哪种语言进行通信、怎样结束通信等规则都需要事先确定。不同的硬件、操作系统之间的通信，所有的这一切都需要事先确定，都需要一种规则。而我们就把这种规则称为协议(protocol)。 协议中存在各式各样的内容。从电缆的规格到IP地址的选定方法、寻找异地用户的方法、双方建立通信的顺序，以及Web页面显示需要处理的步骤，等等。像这样把与互联网相关联的协议集合起来总称为TCP/IP。 互联网协议族（英语：Internet Protocol Suite，缩写IPS）是一个网络通信模型，以及一整个网络传输协议家族，为互联网的基础通信架构。 它常被通称为TCP/IP协议族（英语：TCP/IP Protocol Suite，或TCP/IP Protocols），简称TCP/IP。因为该协议家族的两个核心协议：TCP（传输控制协议）和IP（网际协议），为该家族中最早通过的标准。 由于在网络通讯协议普遍采用分层的结构，当多个层次的协议共同工作时，类似计算机科学中的堆栈，因此又被称为TCP/IP协议栈（英语：TCP/IP Protocol Stack）。 这些协议最早发源于美国国防部（缩写为DoD）的ARPA网项目，因此也被称作DoD模型（DoD Model）。 毕竟网络通信不是像传话那样简单，嚎两声就可以了。若只有一个网络协议来统筹，某个地方需要改变设计时，就必须把所有部分整体替换掉。所以我们需要协议层次化，整个通信网络的任务，可以划分成不同的功能区块，即所谓的层级。所有这些协议都在相应的RFC文档 中讨论及标准化。用于互联网的协议可以比照TCP/IP参考模型 进行分类。 TCP/IP参考模型 ： 应用层 (application layer)：该层包括所有和应用程序协同工作，利用基础网络交换应用程序专用的数据的协议。 该层常见的协议有：HTTP、FTP、DNS等 传输层 (transport layer)：传输层对上层应用层，提供处于网络连接中的两台计算机之间的数据传输。 该层常见的协议有：TCP、UDP等 网络互连层 (internet layer)：网络层规定了通过怎样的传输路线到达对方计算机，并把数据包传送给对方。即寻址。 该层常见的协议有：IP、ARP等 网络接口层 (link layer)：用来处理连接网络的硬件部分。 该层常见的协议有：以太网、Wi-Fi等 利用TCP/IP协议族进行网络通信时，会通过分层顺序与对方进行通信。发送端从应用层往下走，接收端则往应用层往上走。 协议的实现HTTP(超文本传输协议) HTTP是一个客户端（用户）和服务器（网站）请求和应答的标准（TCP）。通过使用网页浏览器、网络爬虫或者其它的工具，客户端发起一个HTTP请求到服务器上指定端口（默认端口为80）。我们称这个客户端为用户代理程序（user agent）。应答的服务器上存储着一些资源，比如HTML文件和图像。我们称这个应答服务器为源服务器（origin server）。在用户代理和源服务器中间可能存在多个“中间层”，比如代理服务器或者隧道（tunnel）。 一、请求与响应那么我们首先了解下HTTP协议的请求与响应具体是如何表现的 通常，由HTTP客户端发起一个请求，创建一个到服务器指定端口（默认是80端口）的TCP连接。HTTP服务器则在那个端口监听客户端的请求。一旦收到请求，服务器会向客户端返回一个状态，比如”HTTP/1.1 200 OK”，以及返回的内容，如请求的文件、错误消息、或者其它信息。 我们访问github，上去抓个包，便可以得到类似以下信息： 123456789101112客户端GET / HTTP/1.1Host: github.comConnection: keep-alivePragma: no-cacheCache-Control: no-cacheUpgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.90 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8Accept-Encoding: gzip, deflate, brAccept-Language: zh-CN,zh;q=0.8Cookie: ...... 12345678910111213服务器HTTP/1.1 200 OKDate: Thu, 21 Dec 2017 11:41:36 GMTContent-Type: text/html; charset=utf-8Transfer-Encoding: chunkedServer: GitHub.comStatus: 200 OKCache-Control: no-cacheVary: X-PJAXX-UA-Compatible: IE=Edge,chrome=1Set-Cookie: ......（紧跟着一个空行，并且由HTML格式的文本组成了GitHub的主页） 请求报文: 请求方法、请求URI、协议版本 请求首部字段(除Host外，均可选) 空行 内容实体(可选) 响应报文: 协议版本、状态码、状态码原因短语 响应首部字段(可选) 空行 内容实体(可选) 二、请求方法为了区分获取资源的方式，HTTP协议定义了几种方法来操作指定的资源，下面介绍最为常见的五种。 Method 安全性 幂等性 说明 GET √ √ 向指定资源发出”显示”请求，一般是查询资源。 POST × × 向指定资源提交数据，请求服务器进行处理。可创建和更新资源。 PUT × √ 向指定资源位置上传其最新内容，即替换资源。 PATCH × √ 将局部修改应用到资源。 DELETE × √ 请求服务器删除所标识的资源。 安全性：任意多次对同一资源操作，都不会导致资源的状态变化。 幂等性：任意多次对同一资源操作，对资源的改变是一样的。 注意：安全性在协议规定中是指请求方法对指定资源操作会产生副作用，即是否会改变资源状态。会导致资源状态变化的，称为”非安全”方法，例如POST，PUT及DELETE，这样的请求会修改、创建甚至是删除指定资源。 不过通常来说我们在HTTP协议中使用最多的方法便是GET和POST了，所以这里主要展示GET和POST的区别，这也是面试中最常被问到的内容： GET POST 返回按钮/重新加载 无副作用 数据将被重新提交(浏览器应该提醒用户数据即将被重新提交) 书签 可以加书签 不可以加书签 缓存 可以被缓存 不可以被缓存 编码类型 application/x-www-form-urlencoded只能进行url编码 application/x-www-form-urlencoded or multipart/form-data.用multipart对二进制数据进行编码。支持多种编码方式 历史记录 参数保留在浏览器历史记录中 参数不保留在浏览器历史记录中 限制数据长度 是的，在发送数据时，GET方法将数据添加到URL; 而URL的长度是有限的（最大URL长度是2048个字符） 对数据长度没有限制 限制数据类型 只允许ASCII码 对数据类型没有限制，二进制数据也是可以使用的。 安全性 与POST相比，GET的安全性较低，因为发送的数据是URL的一部分。发送密码或其他敏感信息时切勿使用GET！ POST比GET更安全，因为这些参数不存储在浏览器历史记录或Web服务器日志中 能见度 所有人都可以在URL中读到数据 数据不会显示在URL中 注意：这里的安全性指的是信息泄露或是被窃取的可能性。 三、响应状态码所有HTTP响应的第一行都是状态行，依次是当前HTTP版本号，3位数字组成的状态代码，以及描述状态的短语，彼此由空格分隔。 状态代码的第一个数字代表当前响应的类型： 1xx消息——请求已被服务器接收，继续处理 2xx成功——请求已成功被服务器接收、理解、并接受 3xx重定向——需要后续操作才能完成这一请求 4xx请求错误——请求含有词法错误或者无法被执行 5xx服务器错误——服务器在处理某个正确请求时发生错误 虽然 RFC 2616中已经推荐了描述状态的短语，例如”200 OK”，”404 Not Found”，但是WEB开发者仍然能够自行决定采用何种短语，用以显示本地化的状态描述或者自定义信息。 四、HTTP状态管理Cookie ：指某些网站为了辨别用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。 因为HTTP协议是无状态的，即服务器不知道用户上一次做了什么，这严重阻碍了交互式Web应用程序的实现。在典型的网上购物场景中，用户浏览了几个页面，买了一盒饼干和两瓶饮料。最后结帐时，由于HTTP的无状态性，不通过额外的手段，服务器并不知道用户到底买了什么，所以Cookie就是用来绕开HTTP的无状态性的“额外手段”之一。服务器可以设置或读取Cookies中包含信息，借此维护用户跟服务器会话中的状态。 会话（session）是一种持久网络协议，在客户端和服务器端之间创建关联，从而起到交换数据包的作用机制。 会话(session)往往使用Cookie来管理，例如我们的登录认证。 首先，客户通过POST方法将请求发送给服务器。 这时候服务器会发放识别用户的Session ID，通过验证从客户端发送过来的登录信息进行身份认证，然后把用户认证状态与Session ID绑定后记录在服务端。向客户端返回响应时，会在首部字段Set-Cookie内写入Session ID(为了防止被盗或被猜出，Session ID的值应该是一个既不会重复，又不容易被找到规律以仿造的字符串并且服务器端也需要进行有效期的管理，保证其安全性)。 客户端接收到从服务器端发来的Session ID后，会将其作为Cookie保存在本地。下次向服务器发送请求时，浏览器会自动发送Cookie，所以Session ID也随之发送到服务器。服务器端可通过验证接收到的Session ID识别用户和其认证状态。 因为cookie和session都有保持HTTP状态的功能，所以他们两个也常常被拿出来比较。 简单来说主要区别： session:存储在服务器，更安全，当关闭浏览器后会话同样也会关闭。 cookie:存储在客户端，不安全，在到期和被删除前将一直有效。 TCP(传输控制协议) TCP是一种面向连接的、可靠的、基于字节流的传输层通信协议。 TCP将大块数据分割成已报文段为单位的数据包，并给数据包提供可靠的传输服务。IP协议的作用是把各种数据包传送给对方。 应用层向TCP层发送用于网间传输的、用8位字节表示的数据流，然后TCP把数据流分区成适当长度的报文段（通常受该计算机连接的网络的数据链路层的最大传输单元（MTU）的限制）。之后TCP把结果包传给IP层，由它来通过网络将包传送给接收端实体的TCP层。 TCP为了保证不发生丢包，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。然后接收端实体对已成功收到的包发回一个相应的确认（ACK）；如果发送端实体在合理的往返时延（RTT）内未收到确认，那么对应的数据包就被假设为已丢失将会被进行重传。TCP用一个校验和函数来检验数据是否有错误；在发送和接收时都要计算校验和。 TCP传输的时候主要会说到三次握手与四次挥手，若在握手过程中某个阶段莫名中断，TCP协议会再次以相同的顺序发送相同的数据包。 三次握手: C(SYN)：洞拐洞拐，我是洞幺。这里有份急电要传给你。 S(SYN，ACK)：洞幺洞幺，我是洞拐。已确认可以接受电报。 C(ACK)：收到，OVER。着手发电报。 四次挥手: C(FIN)：电报发送完毕，请求关闭(等待回复FIN_WAIT_1) S(ACK)：收到，需要确认信息是否传输完毕，请稍等。(确认数据传输完成CLOSE_WAIT) S(FIN)：已确认可以关闭(等待确认LAST_ACK) C(ACK)：收到，OVER。(完成关闭TIME_WAIT) 补充：第三次握手失败会怎样？ 当客户端收到服务端的SYN+ACK应答后，其状态变为ESTABLISHED，并会发送ACK包给服务端，准备发送数据了。如果此时ACK在网络中丢失，过了超时计时器后，那么Server端会重新发送SYN+ACK包，重传次数默认是5次。如果重传指定次数到了后，仍然未收到ACK应答，那么一段时间后，Server自动关闭这个连接。但是Client认为这个连接已经建立，如果Client端向Server写数据，Server端将以RST包响应，方能感知到Server的错误。 IP(网际协议) IP（英语：Internet Protocol）的任务是仅仅根据源主机和目的主机的地址传送数据。为此目的，IP定义了寻址方法和数据报的封装结构。 这里先介绍IP的寻址，如何将IP地址分配给各个终端节点，以及如何划分和组合子网。 IP地址（英语：IP Address），是分配给网络上使用网际协议IP的设备的数字标签。常见的IP地址分为IPv4与IPv6两大类。 目前最主要的仍是IPv4，而IPv6还在积极部署中。 最初，一个IP地址被分成两部分：网络识别码在地址的高位字节中，主机识别码在剩下的部分中。 为了克服这个限制，在随后出现的分类网络中，地址的高位字节被重定义为网络的类(Class)。这个系统定义了五个类别：A、B、C、D和E。A、B和C类有不同的网络类别长度，剩余的部分被用来识别网络内的主机，这就意味着每个网络类别有着不同的给主机编址的能力。D类被用于多播地址，E类被留作将来使用。 由于分类网络的可拓展性不足且会给路由设备增加额外的负担，无类别域间路由（CIDR）正式地取代了分类网络。 无类别域间路由(CIDR)是一个用于给用户分配IP地址以及在互联网上有效地路由IP数据包的对IP地址进行归类的方法。 这个解释起来就超纲了，但还是在这挖个坑，填不填看缘了。 注：IP地址也分公网和内网，由网络地址转换(NAT)实现。 注意：虽然DNS和URI是应用层的协议，但是因其与IP地址关联甚大，于是乎就写在IP协议下面了。 域名系统DNS我们很难通过输入一组纯数字来区分需要访问的IP地址，所以就有了方便人类记忆的域名(由字母搭配数字)。可计算机不擅长处理名称，这就需要有域名到IP地址之间的解析服务，即DNS。这样我们只需要输入易于记忆的域名，然后通过DNS解析为IP地址进行访问。 123456域名划分：.com 顶级域名baidu.com 一级域名www.baidu.com 二级域名bbs.baidu.com 二级域名tieba.baidu.com 二级域名 tips:www.作为域名前缀起到主域名与子域名区分的作用 统一资源标志符可如果访问地址数据量大、资源丰富的话，我们该如何去取到想要的资源呢？这便是URI(统一资源标识符)的作用了。 URI可被视为定位符（URL），名称（URN）或两者兼备。统一资源名（URN）如同一个人的名称，而统一资源定位符（URL）代表一个人的住址。换言之，URN定义某事物的身份，而URL提供查找该事物的方法。 用于标识唯一书目的ISBN系统是一个典型的URN使用范例。例如，ISBN 0-486-27557-4( \ 0-486-27557-4 )无二义性地标识出莎士比亚的戏剧《罗密欧与朱丽叶》的某一特定版本。为获得该资源并阅读该书，人们需要它的位置，也就是一个URL地址。在类Unix操作系统中，一个典型的URL地址可能是一个文件目录，例如file:///home/username/RomeoAndJuliet.pdf。该URL标识出存储于本地硬盘中的电子书文件。因此，URL和URN有着互补的作用。 我们在浏览器上输入的网址具体解析如下： http:// user:passwd@ www.example.com :80 /dir/index.html ?uid=1 协议名 认证信息(可选) 服务器地址 服务器端口号 文件路径 查询字符串 tips: 格式化文本与纯文本相对，具有风格、排版等信息，如颜色、式样(黑体、斜体等)、字体尺寸、特性(如超链接)等。 格式化是指对磁盘或磁盘中的分区（partition）进行初始化的一种操作，这种操作通常会导致现有的磁盘或分区中所有的文件被清除。 有些人往往会弄不清在计算机中出现的“位”和Byte,KB,MB等有何关系，而它们的关系是，8位等于一字节Byte，即8bit=1B 。32位处理器每次处理 4Byte(32bit)，同理，64位处理器每次处理 8Byte(64bit) 在 ASCII 编码中，一个英文字母字符存储需要1个字节。在 GB 2312 编码或 GBK 编码中，一个汉字字符存储需要2个字节。在UTF-8编码中，一个英文字母字符存储需要1个字节，一个汉字字符储存需要3到4个字节。]]></content>
      <categories>
        <category>网络通信</category>
        <category>协议</category>
      </categories>
      <tags>
        <tag>网络基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[接口测试学习手册]]></title>
    <url>%2F2017%2F12%2F%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C%2F</url>
    <content type="text"><![CDATA[接口因项目需要前后端解耦出现，用做沟通的桥梁。 接口自动化：设计框架、工具类封装、基类封装、调试错误、数据处理、回写测试结果、解决数据依赖、结果统计、邮件服务、发送报告。 流程黑盒测试用例设计需要需求文档，接口测试用例设计需要接口文档 接口测试设计主要四个方面：1.功能 2.逻辑业务 3.异常 4.安全 功能 (功能是否正常 功能是否按照接口文档实现) 业务逻辑 (是否依赖业务) 异常 参数(key)异常： 关键字参数 参数为空 参数多余或缺失 错误参数 数据(value)异常：关键字数据 数据为空 长度不一致 错误数据 安全 (cookie、header、唯一识别码) 断言可根据业务性质做判断]]></content>
      <categories>
        <category>软件测试</category>
        <category>接口测试</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Stay Hungry, Stay Foolish.]]></title>
    <url>%2F2017%2F12%2FStay-Hungry-Stay-Foolish%2F</url>
    <content type="text"><![CDATA[2005年，Steve Jobs 在Stanford 毕业典礼上演讲，最后送给了在场的年轻人一句Stay Hungry, Stay Foolish. 这个演讲后来被广为流传，各种中译版也纷纷出现，有些人把这句话翻译为求知若饥，虚心若愚 ，《Cheers 杂志》则把这句话翻译为饥渴求知，虚怀若愚 。无论如何，我认为这些都是错误的解读。 什么叫Hungry?美国人不会用hungry来形容对于知识的追求。对知识，他们用的是好奇 (curious)这个字。一个求知若渴的人，叫做intellectually 或是eager to learn ，但绝对不会是intellectually hungry ，也极少是hungry to learn 。 用到hungry的时候，针对成功 ，也就是hungry for success 。所以Steve Jobs的Stay Hungry ，根本不是叫你去求’知’的意思，他真正想说的，是要你去不停的寻找成功，永远不知道满足。为什么？因为创业者最常犯的错误，除了做出没人要的东西之外，就是太快满足于初期的成功，接着开始以为自己是神，再也不会失败。 杨致远就是最好的例子，90年代末期Yahoo叱咤网络圈后，他开始陶醉于成功之中，成天打高尔夫球、旅行，结果呢？快转十年之后，Yahoo现在的市值等于他们手中持有的阿里巴巴股票，也就是说这家母公司是一毛不值。为什么？因为他失去了hungry。 回头看Steve Jobs，过去14年来，他像一头饥饿的猛兽，永远不会满足，Mac、iPod、iPhone、iPad一招接一招，不停直捣对手的心脏，如果不是因为健康状况，他大概永远没有停歇的一天，这，就是hungry，这，就是Fox写的稀有的猪 。 什么叫Foollish?美国人也不会用foolish来形容虚心，虚心叫做humble 、叫做be a good listener 叫做be open to new ideas 。而fool，根本不是虚心的人 ，fool是笨蛋 的意思。 You gotta be a fool to believe that will work. (你一定是个白痴才会相信那东西会成功)是所有的创业者最常听到的，而Steve Jobs想告诉你的，就是别理他们，继续当你的傻瓜。因为要革命，你就注定要在众人的误会中孤独的前进。 转载自：http://mrjamie.cc/2011/09/16/stay-hungry-stay-foolish/]]></content>
      <categories>
        <category>书山有路</category>
        <category>咬文嚼字</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[hexo 使用手册]]></title>
    <url>%2F2017%2F12%2Fhexo-%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C%2F</url>
    <content type="text"><![CDATA[简单上手要求： 安装了node.js和Git 1234npm install hexo-cli -ghexo init blog #在blog文件夹(若没有该文件夹则会自动创建)下面克隆hexo需要的启动文件cd blognpm install #安装package.json中的依赖 敲完上述指令，hexo的雏形就出来了tips: 12npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@^1.0.0 (node_modules\chokidar\node_modules\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.1.2: wanted &#123;"os":"darwin","arch":"any"&#125; (current: &#123;"os":"win32","arch":"x64"&#125;) 当你在安装的时候看到这样的提示信息，不要忧伤，不要心急。这很正常！这是因为一个叫fsevents 的依赖它只支持darwim 操作系统，也就是苹果系统喽。 站点配置配置站点之前，首先简单介绍一下目录结构 文件名 说明 _config.yml 站点配置文件 package.json 安装依赖文件 scaffolds 模板文件夹。hexo新建文章时所用模板存放的地方。 scripts 脚本文件夹。存放在此的js文件将被自动执行。 source 资源文件夹。 themes 主题文件夹 一般配置站点我们主要是修改_config.yml 文件，比如: 1234567# Sitetitle: Hexo subtitle: description: author: XXXX XXXlanguage: zh-Hanstimezone: 其中，description主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。author参数用于主题显示文章的作者。 timezone 默认是使用我们电脑的时区，一般不需要填。language 默认英文，简体中文是填zh-Hans 。其它部分，按个人喜好填写就行了。 然后修改下网址链接： 123456# URL## 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。url: http://yoursite.comroot: /permalink: :year/:month/:day/:title/permalink_defaults: 大多数情况下填个自己的网址就好了，在这里我习惯将站点的链接格式修改为permalink: :year/:month/:title/ 缩短链接地址的长度。 123456789101112131415# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/#theme: landscapetheme: next #这里采用一个大众主题next，热门主题往往能省下不少时间# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:&lt;username&gt;/&lt;username&gt;.github.io.git branch: master message: update hexo name: [git user] email: [git email] 设定完主题和部署方式，剩下的就可以根据自己选择的主题来个性定制了。如果想更深入配置站点的话，参考官方文档 。 启用next主题，在终端窗口进行安装，指令如下 12$ cd blog$ git clone https://github.com/iissnan/hexo-theme-next themes/next 启用git部署之前记得安装npm install hexo-deployer-git --save GitHub pages多终端同步github配置 12345678910111213初始化本地仓库： git init添加本地所有文件到仓库：git add -A添加commit：git commit -m "blog源文件"添加本地仓库分支hexo：git branch hexo添加远程仓库：git remote add origin git@github.com:yourname/yourname.github.io.git将本地仓库的源文件分支hexo强制推送到远程仓库hexo分支：git push origin hexo -f git clone下来的第三方主题可能会导致你发布的博客是一片空白，这时候我们需要将主题文件夹.git文件夹禁止加入到版本库中，在.gitignore文件中添加语句或者是在.git/info/exclude中添加 其它终端配置 123456789101112131415git clone -b hexo git@github.com:yourname/yourname.github.io.git //将Github中hexo分支clone到本地cd yourname.github.io //切换到刚刚clone的文件夹内npm install //注意，这里一定要切换到刚刚clone的文件夹内执行，安装必要的所需组件，不用再inithexo new post "new blog name" //新建一个.md文件，并编辑完成自己的博客内容git add source //经测试每次只要更新sorcerer中的文件到Github中即可，因为只是新建了一篇新博客git commit -m "XX"git push origin hexo //更新分支hexo d -g //push更新完分支之后将自己写的博客对接到自己搭的博客网站上，同时同步了Github中的master 终端同步 1234567891011git pull origin hexo //先pull完成本地与远端的融合hexo new post " new blog name"git add sourcegit commit -m "XX"git push origin hexohexo d -g 更新依赖npm全局更新 1npm update -g npm更新站点package.json 中的依赖包 12cd ~/blog/ # 跳转到博客的根目录下npm update 更新npm 1npm install npm -g 更新Node.js 1npm install n -g Git解决冲突123git stash # 存储本地修改git pull # 获取更新git stash pop # 还原暂存内容 主题配置 在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。 为了描述方便，在以下说明中，将前者称为站点配置文件 ， 后者称为主题配置文件 。 所有我们先cd blog/theme/next/ 然后在主题目录下用你熟悉的编辑器修改配置文件_config.yml 。 选择主题类型打开文件后我们搜索Scheme Setting ，这里有4行配置，默认的选项是Muse。我觉得Gemini比较合适，便注释掉了Muse，去掉Gemini前的#，这样便选好了自己喜欢的主题类型。 12345# Schemes#scheme: Muse#scheme: Mist#scheme: Piscesscheme: Gemini 下面4个是原作者文档中提供的各个主题参考示例： Muse scheme: XiaMo | OAwan | Hui Wang Mist scheme: Jeff | uchuhimo | xirong Pisces scheme: Vi | Acris | Rainy Gemini scheme: Ivan.Nginx | Alynx | Raincal 菜单设置主题作者的注释已经写的很清楚了，基本上我们可以从注释中了解的差不多了。我，我就做下笔记。 12345678910111213menu: home: / || home about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat# Enable/Disable menu icons.menu_icons: enable: true 用法: Key: /link/ || icon Key 是菜单项，区分大小写。以简体中文为例，菜单项的名称可以在主题目录下languages/zh-Hans.yml中修改和添加。 link 是菜单项链接的内容，若你的站点运行在子目录中，请将链接前缀的 / 去掉(例：/archives -&gt; archives). icon 是菜单项显示的图标，通过Font Awesome 的图标名字来启用，如果不设置或无效的设置便会自动加载一个问号图标。 侧栏设置社交链接123456789101112# Social Links.social: GitHub: https://github.com/yourname || github 微博: http://weibo.com/your-user-name || weibosocial_icons: enable: true icons_only: false #是否只展示图标 transition: false #过渡属性？#links_layout: block #每个一行links_layout: inline #不换行 # Blog rolls 中是友情链接的设置，这里感觉没什么好说的。 头像设置1234# Sidebar Avatar# in theme directory(source/images): /images/avatar.gif# in site directory(source/uploads): /uploads/avatar.gifavatar: /images/avatar.gif 头像图片放在主题目录下 source/images/ ，去掉avatar: /images/avatar.gif 的注释并将avatar.gif替换为你使用头像的图片名。 也可以放在站点下新建一个uploads文件夹或使用头像链接地址。但是，嫌弃，麻烦。 目录设置123456789101112131415# Table Of Contents in the Sidebartoc: enable: true # Automatically add list number to toc. number: true # If true, all words will placed on next lines if header width longer then sidebar width. wrap: false# Creative Commons 4.0 International License.# http://creativecommons.org/# Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zerocreative_commons: by-nc-sa#creative_commons: 进入文章后，侧栏展示目录。设置了自动添加目录序号，目录名超出部分隐藏。基本上不需要改动。主要是装X，取消了creative_commons 的注释，也就是加入了知识共享。 哪有什么知识共享，都是划重点，做笔记 。 侧栏属性1234567891011# Sidebar offset from top menubar in pixels (only for Pisces | Gemini).offset: 12# Back to top in sidebar (only for Pisces | Gemini).b2t: true# Scroll percent label in b2t button.scrollpercent: true# Enable sidebar on narrow view (only for Muse | Mist).onmobile: false 侧栏的位置(position)和展示(display)效果的默认设置已经很合适了。侧栏和菜单栏之间间距为12像素，看上去也很舒服，都没必要改。 只是启用了b2t ，右下角的回到顶部 在阅读的时候感觉没有侧栏的回到顶部友好。 目录的百分比标签(scrollpercent)纯粹是为了好看。。。 站点图标设置1234567favicon: small: /images/favicon-16x16-next.png medium: /images/favicon-32x32-next.png apple_touch_icon: /images/apple-touch-icon-next.png safari_pinned_tab: /images/logo.svg #android_manifest: /images/manifest.json #ms_browserconfig: /images/browserconfig.xml 主题作者提供了一个很棒的网站https://realfavicongenerator.net，可以检测站点的图标还可以生成站点的图标，其实默认的设置已经让我很满足了，不想再花时间自己找图片。。。追求个性可以从提供的网站生成好站点图标，然后放在主题目录的images文件夹内。当然放在站点目录下的images文件夹中也可以，但是记得移除路径中的/images/前缀。 站点页脚设置 一般就是设置个站点时间，默认会采取当前年份，所有这里不大需要怎么配置。 rss和seo的设置还没怎么研究过 发表文章设置在Post Settings 里可以设置阅读全文、首页文章标签、文章计数、微信订阅、打赏和许可声明等。 推荐在文章中手动输入&lt;!--more--&gt; 来摘录首页展示的文章内容。这里我只设置了一个文章计数，做笔记做的丰不丰富，心里还是得有点B number的。 123456post_wordcount: item_text: true wordcount: true #字数统计 min2read: true #阅读时长 totalcount: true #Site words total count separated_meta: true 文章计数各个选项的说明文字都可以在language目录下找到配置文件配，例：languages/zh-Hans.yml 第三方服务在多方评论都挂掉，Hypercomments 要翻墙的情况下，这里出现了Gitment 123456789101112131415# Gitment# Introduction: https://imsun.net/posts/gitment-introduction/gitment: enable: false mint: true # RECOMMEND, A mint on Gitment, to support count, language and proxy_gateway count: true # Show comments count in post meta area lazy: false # Comments lazy loading with a button cleanly: false # Hide 'Powered by ...' on footer, and more language: # Force language, or auto switch by theme github_user: # MUST HAVE, Your Github ID github_repo: # MUST HAVE, The repo you use to store Gitment comments client_id: # MUST HAVE, Github client id for the Gitment client_secret: # EITHER this or proxy_gateway, Github access secret token for the Gitment proxy_gateway: # Address of api proxy, See: https://github.com/aimingoo/intersect redirect_protocol: # Protocol of redirect_uri with force_redirect_protocol when mint enabled $ npm install –save gitment https://imsun.net/posts/gitment-introduction/ 分享 123456789101112131415161718192021222324252627# NeedMoreShare2# This plugin is a pure javascript sharing lib which is useful in China.# See: https://github.com/revir/need-more-share2# Also see: https://github.com/DzmVasileusky/needShareButton# iconStyle: default | box# boxForm: horizontal 水平| vertical 垂直# position: top / middle / bottom + Left / Center / Right# networks: Weibo,Wechat,Douban,QQZone,Twitter,Linkedin,Mailto,Reddit,# Delicious,StumbleUpon,Pinterest,Facebook,GooglePlus,Slashdot,# Technorati,Posterous,Tumblr,GoogleBookmarks,Newsvine,# Evernote,Friendfeed,Vkontakte,Odnoklassniki,Mailruneedmoreshare2: enable: false postbottom: enable: false options: iconStyle: box boxForm: horizontal position: bottomCenter networks: Weibo,Wechat,Douban,QQZone,Twitter,Facebook float: enable: false options: iconStyle: box boxForm: horizontal position: middleRight networks: Weibo,Wechat,Douban,QQZone,Twitter,Facebook busuanzi统计 1234567891011121314151617# Show PV/UV of the website/page with busuanzi.# Get more information on http://ibruce.info/2015/04/04/busuanzi/busuanzi_count: # count values only if the other configs are false enable: false # custom uv span for the whole site site_uv: true site_uv_header: &lt;i class="fa fa-user"&gt;&lt;/i&gt; site_uv_footer: # custom pv span for the whole site site_pv: true site_pv_header: &lt;i class="fa fa-eye"&gt;&lt;/i&gt; site_pv_footer: # custom pv span for one page only page_pv: true page_pv_header: &lt;i class="fa fa-file-o"&gt;&lt;/i&gt; page_pv_footer: 本地搜索 123456789# Local search# Dependencies: https://github.com/flashlab/hexo-generator-searchlocal_search: enable: false # if auto, trigger search by changing input # if manual, trigger search by pressing enter key or search button trigger: auto # show top n results per article, show all results by setting to -1 top_n_per_article: 1 $ npm install hexo-generator-searchdb –save 站点配置 search: path: search.xml field: post format: html limit: 10000 站点背景设置1234567891011121314151617181920212223242526272829303132333435# Progress bar in the top during page loading. #进度条pace: false# Themes list:#pace-theme-big-counter#pace-theme-bounce#pace-theme-barber-shop#pace-theme-center-atom *#pace-theme-center-circle#pace-theme-center-radar#pace-theme-center-simple#pace-theme-corner-indicator#pace-theme-fill-left#pace-theme-flash *#pace-theme-loading-bar *#pace-theme-mac-osx#pace-theme-minimal# For example# pace_theme: pace-theme-center-simplepace_theme: pace-theme-minimal# Canvas-nestcanvas_nest: false #鸟巢# three_wavesthree_waves: false #波纹# canvas_linescanvas_lines: #线路# canvas_spherecanvas_sphere: false #球# Only fit scheme Pisces# Canvas-ribboncanvas_ribbon: false 动画设置 1234567891011121314151617motion: enable: true async: false transition: # Transition variants: # fadeIn | fadeOut | flipXIn | flipXOut | flipYIn | flipYOut | flipBounceXIn | flipBounceXOut | flipBounceYIn | flipBounceYOut # swoopIn | swoopOut | whirlIn | whirlOut | shrinkIn | shrinkOut | expandIn | expandOut # bounceIn | bounceOut | bounceUpIn | bounceUpOut | bounceDownIn | bounceDownOut | bounceLeftIn | bounceLeftOut | bounceRightIn | bounceRightOut # slideUpIn | slideUpOut | slideDownIn | slideDownOut | slideLeftIn | slideLeftOut | slideRightIn | slideRightOut # slideUpBigIn | slideUpBigOut | slideDownBigIn | slideDownBigOut | slideLeftBigIn | slideLeftBigOut | slideRightBigIn | slideRightBigOut # perspectiveUpIn | perspectiveUpOut | perspectiveDownIn | perspectiveDownOut | perspectiveLeftIn | perspectiveLeftOut | perspectiveRightIn | perspectiveRightOut post_block: flipXIn #文章 post_header: slideDownIn #文章标题 post_body: slideDownIn #文章内容 coll_header: slideLeftIn # Only for Pisces | Gemini. sidebar: slideUpIn TODO:启用资源文件夹来存放文章需要使用的图片等，markdown的引用可以将图片放在source/images下 注：启用的资源文件不要含有空格，因为通过标签插件 引用的时候是根据空格来做判断的，且此时直接输入文件名即可不用再加文件路径 保存图片，大图建议使用.jpg格式，小图建议使用.png格式 启用数据文件夹来试验next主题配置功能 研究标签插件给写文章带来的便利 研究去掉文章中的一些设置 比如说权限声明 一般配置站点信息已经第三方服务，需要清缓存 查看github账户信息 https://api.github.com/users/$yourname/]]></content>
      <categories>
        <category>hexo</category>
        <category>站点配置</category>
        <category>主题配置</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[软件测试的目的]]></title>
    <url>%2F2017%2F11%2F%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9A%84%E7%9B%AE%E7%9A%84%2F</url>
    <content type="text"><![CDATA[测试的目的是什么呢？这是一个看起来很简单、不太值得讨论的问题，但往往这样的问题其实是很难回答的，比如人生的意义是什么？好，现在我们就来，列举一下我们经常听到的对这个问题的回答： 发现错误 软件测试的目的是尽可能发现并改正被测试软件中的错误，提高软件的可靠性。 这个定义听起来很正确，但用它来指导测试会带来很多问题。比如有的组织用发现的bug数来衡量测试人员的业绩，其实这就是这种测试目的论在后面作祟，其结果如何呢： 其一，有一些不够敬业的测试人员会找来一些无关痛痒的bug来充数，结果许多时间会被浪费在这些无关痛痒的bug上（当然应该修复，但也得考虑严重程度、优先级等等）； 其二，测试人员会花很大力气设计一些复杂的测试用例去发现一些迄今尚未发现的缺陷，而不关心这些缺陷是否在实际用户的使用过程当中是否会发生，从而浪费了大量的宝贵时间。 究其根源，就是因为对测试目的的这种错误理解造成的，为什么这么说呢？因为软件里bug的数量是无从估计的，那么如果测试的目的是为了找bug，那么测试工作将变成一项无法完成也无法衡量进度而且部分无效的工作（因为有些bug在实际的运行过程当中根本不会发生）。 保证质量 测试的目的就是为了保证软件质量 这个定义也是看似正确，但实际上，混淆了测试和质量保证工作的边界。软件质量要素有很多，包括：Understandability、 Conciseness、Portability、Consistency、Maintainability、Testability、 Usability、Structures、Efficiency、Security等等，所以，软件质量保证和测试其实关注的方向是不同的。 验证需求那么测试的目的应该是什么呢？IEEE在1983年提出了软件测试的定义： 使用人工或自动手段来运行或测定某个系统的过程，其目的在于检验它是否满足规定的需求或是弄清预期结果与实际结果之间的差别。 简而言之，测试的目的应该是验证需求，而bug（预期结果与实际结果之间的差别）是这个过程中的结果而非目标。测试人员应该像工兵一样，在大部队（客户）预期前进的方向上探雷、扫雷（bug），而不需过分注重那些根本没有人会去碰的地雷。衡量一个测试人员应该去衡量他/她测试了多少需求（测试工作量），漏过了多少bug（测试有效性）。 因此，我们可以看到有好的需求文档/体系对测试工作的必要性，我们看到许多测试团队在业务需求/软件需求不完备的情况下，往往或重新编写测试需求。 目的总结测试的目的主要有以下8个方面： 验证软件需求和功能是否得到完整实现 测试首先必须用来验证软件的需求和功能是否得到完整实现。其次是验证软件在正常和非正常情况下的功能和特性。 测试不仅要验证软件在正常情况下的功能和特性是否可以使用和达到期望值，更多的是验证在非正常情况下功能和特性能否达到期望的要求。 比如一个计算器程序，正常情况下当用户输入正确的数字表达式时要能够计算出正确的结果，但是当用户输入错误的表达式时，软件要给用户提示说用户输入错误，而不能出现运行异常（如崩溃）。 验证软件是否可以发布使用 软件是否可以发布使用需要经过测试来验证，未经测试的软件是不能发布的。即使是内部使用的软件也同样需要测试，软件的发布需要经过验收测试。 发现软件系统的缺陷、错误及不足 软件系统的缺陷，错误及不足需要经过测试来发现。目前发现软件系统的缺陷、错误及不足的主要手段有评审、检视、走读、单元测试、集成测试、系统测试等。 获取软件产品的质量信息 软件产品的质量信息也必须通过测试才能获取，没有经过测试的软件，软件质量的好坏是无从知道的，最多只能根据开发人员的水平进行推测。经过测试后，就可以得到开发各阶段发现的缺陷数，进而可以较为准确地推测出软件潜在的缺陷数。 预防下一版本可能出现的问题 测试不仅可以用来发现当前版本的问题，还可以根据目前发现的问题进行分析，找出当前版本出现的问题有哪些类型，产生这些类型问题的根源是什么。然后采取相应的措施。比如当前版本出现了很多SQL文方面的错误，那么就可以加强员工对SQL文的培训。 预防用户使用软件时可能出现的问题 把没有经过测试的软件提供给用户使用，将会使用户在使用过程中遭受大量挫折，大大降低了愉快的用户体验。测试可以有效地发现大部分影响使用的错误，经修正后软件预防了用户使用软件时可能出现的问题。 提前发现开发过程中的问题和风险 写系统测试用例时可以发现需求中的问题和遗漏，写集成测试用例时可以发现高层设计中的问题，写单元测试用例则可以发现详细设计和编码中的问题。通过测试，可以在早期阶段就发现这些错误，大大降低开发的风险。 提供可以用以分析的测试结果数据 测试还能提供用以分析的测试结果数据、测试问题记录表等数据。在测试完成后进行分析，可以了解主要有哪些类型的缺陷，进而分析产生这些类型缺陷的原因。还可以分析开发各阶段发现的问题数，把他们与以前的经验数据进行对比分析，从而知道在开发阶段中哪个阶段是薄弱环节，进而重点针对薄弱环节进行加强。 转载自：http://www.51testing.com/html/60/n-220760.html]]></content>
      <categories>
        <category>软件测试</category>
        <category>测试理论</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[性能测试学习手册]]></title>
    <url>%2F2017%2F11%2F%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C%2F</url>
    <content type="text"><![CDATA[专有术语QPS :每秒查询率(Query Per Second) ,每秒的响应请求数，也即是最大吞吐能力。QPS = req/sec = 请求数/秒QPS统计方式 [一般使用 http_load 进行统计]QPS = 总请求数 / ( 进程总数 * 请求时间 )QPS: 单个进程每秒请求服务器的成功次数 峰值QPS :原理：每天80%的访问集中在20%的时间里，这20%时间叫做峰值时间公式：( 总PV数 80% ) / ( 每天秒数 20% ) = 峰值时间每秒请求数(QPS) HPS（Hits Per Second） ：每秒点击次数，单位是次/秒。 TPS（Transaction per Second）：系统每秒处理交易数，单位是笔/秒。 对于互联网业务中，如果某些业务有且仅有一个请求连接，那么TPS=QPS=HPS，一般情况下用TPS来衡量整个业务流程，用QPS来衡量接口查询次数，用HPS来表示对服务器点击请求。 PV :访问量即Page View, 即页面浏览量或点击量，用户每次刷新即被计算一次单台服务器每天PV计算公式1：每天总PV = QPS 3600 6公式2：每天总PV = QPS 3600 8 UV :独立访客即Unique Visitor,访问您网站的一台电脑客户端为一个访客。00:00-24:00内相同的客户端只被计算一次 服务器数量 ：机器：峰值时间每秒QPS / 单台机器的QPS = 需要的机器机器：ceil( 每天总PV / 单台服务器每天总PV ) 并发数 ：并发用户数是指系统可以同时承载的正常使用系统功能的用户的数量 吐吞量 ：吞吐量是指系统在单位时间内处理请求的数量 响应时间（RT) :响应时间是指系统对请求作出响应的时间 例子：每天300w PV 的在单台机器上，这台机器需要多少QPS？答：( 3000000 0.8 ) / (86400 0.2 ) = 139 (QPS)如果一台机器的QPS是58，需要几台机器来支持？答：139 / 58 = 3 行业标准交易响应时间 ：系统稳定运行时间段内，同一交易的平均响应时间。 对于在线交易： 互联网企业：500毫秒以下，例如淘宝业务10毫秒左右。 金融企业：1秒以下为佳，部分复杂业务3秒以下。 保险企业：3秒以下为佳。 制造业：5秒以下为佳。 系统处理能力 ：系统在利用系统硬件平台和软件平台进行信息处理的能力。 一般情况下： 金融行业：1000TPS~9000TPS 保险行业：100TPS~1000TPS 制造行业：10TPS~50TPS 互联网电子商务：10000TPS~100000TPS,例如天猫5万TPS 互联网中型网站：100TPS~500TPS 互联网小型网站: 50TPS~100TPS 并发用户数 ：在同一时刻内，登录系统并进行业务操作的用户数量。 一般情况下，性能测试是将系统处理能力容量测出来，而不是测试并发用户数，除了服务器长连接可能影响并发用户数外，系统处理能力不受并发用户数影响。 错误率 ：错误率指系统在负载情况下，失败交易的概率。错误率＝(失败交易数/交易总数)*100%。稳定性较好的系统，其错误率应该由超时引起，即为超时率。 一般情况下，错误率不超出千分之六，即成功率不低于99.4%]]></content>
      <categories>
        <category>软件测试</category>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[55各个版本功能比较]]></title>
    <url>%2F2017%2F11%2F55%E5%90%84%E4%B8%AA%E7%89%88%E6%9C%AC%E5%8A%9F%E8%83%BD%E6%AF%94%E8%BE%83%2F</url>
    <content type="text"><![CDATA[表格中表明是否对选项支持 Servers Python libev Go Fast Open Y Y N Multiple Users Y Y Y Management API Y Y N Workers Y N N Graceful Restart Y N N ss-redir N Y N ss-tunnel N Y N UDP Relay Y Y N OTA Y Y Y Clients Windows ShadowsocksX Qt5 Andriod iOS App Store iOS Cydia System Proxy Y Y N Y N Y CHNRoutes Y Y N Y Y Y PAC Configuration Y Y N N N N Profile Switching Y Y Y Y N Y QR Code Scan Y Y Y Y Y Y QR Code Generation Y Y Y Y N Y Download Tutorial Wiki Troubleshooting OpenVPN、Shadowsocks及ShadowVPN之间的比较 OpenVPN Shadowsocks ShadowVPN Layer IP TCP/UDP IP Frontend VPN socks/iptables VPN Security CCA CPA CCA Protocol Sniffing possible difficult difficult Tamper Proof Y N Y Disruption Proof N N Y Speed fast(UDP) fast fast CPU utilization high medium low RAM low medium low 编译linode内核12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667681. 查看你的机器内核版本：#uname -r3.11.6-x86_64-linode352. 去 https://www.kernel.org/pub/linux/kernel/v3.0/ 下载相同版本的源码到任意目录，解压#mkdir /root/mykernel#cd /root/mykernel#wget https://www.kernel.org/pub/linux/kernel/v3.0/linux-3.11.6.tar.gz#tar xzvf linux-3.11.6.tar.gz3. 安装内核编译工具#apt-get update &amp;&amp; apt-get install -y build-essential libncurses5-dev libssl-dev bc4. 复制Linode原来的内核编译配置文件到源码根目录，在CONFIG_TCP_CONG_CUBIC=y下面增加一行 CONFIG_TCP_CONG_HYBLA=y，再生成编译模块需要的内核#cd linux-3.11.6#zcat /proc/config.gz &gt; .config#vi .config查找CONFIG_TCP_CONG_CUBIC=y，在下面增加一行 CONFIG_TCP_CONG_HYBLA=y，保存#make5. 耐心等待编译内核完成，单核编译大约需15分钟，完成后，进入模块所在的目录，编写Makefile#cd net/ipv4/#mv Makefile Makefile.old#vi Makefile以下是Makefle的内容，注意要把KDIR修改为你自己的源码路径，其他则照抄就可以了# Makefile for tcp_hybla.koobj-m := tcp_hybla.oKDIR := /root/mykernel/linux-3.11.6PWD := $(shell pwd)default: $(MAKE) -C $(KDIR) SUBDIRS=$(PWD) modules注意上面第三行 KDIR := /root/kernel/linux-3.11.6 要修改成自己解压的目录，并且最后一行必须以 tab 开头，不可以用空格，不可以用空格。不懂Makefile的规则，我在这里踩了坑。6.进入源码根目录，编译模块#cd /root/mykernel/linux-3.11.6/#make modules7.进入到模块所在目录，复制生成的 tcp_hybla.ko 到加载目录，测试加载模块#cd /root/mykernel/linux-3.11.6/net/ipv4#cp tcp_hybla.ko /root/mykernel/#cd /root/mykernel/加载前#sysctl net.ipv4.tcp_available_congestion_controlnet.ipv4.tcp_available_congestion_control = cubic reno#insmod tcp_hybla.ko加载后#sysctl net.ipv4.tcp_available_congestion_controlnet.ipv4.tcp_available_congestion_control = cubic reno hybla设置hybal为优先#sysctl net.ipv4.tcp_congestion_control=hybla8.设置开机自动加载模块，把tcp_hybla.ko 复制到 /lib/modules/3.11.6-x86_64-linode35/kernel/net/ipv4#cd /lib/modules/3.11.6-x86_64-linode35#mkdir -p kernel/net/ipv4#cd kernel/net/ipv4#cp /root/mykernel/tcp_hybla.ko ./#cd /lib/modules/3.11.6-x86_64-linode35#depmod -a这里报错时发现在另一个内核模块4.4.0-36-generic中可以找到9.修改/etc/sysctl.conf 开机自动设置hybal为优先#vi /etc/sysctl.confnet.ipv4.tcp_congestion_control = hybla转载请注明出处( http://www.fslk.net/?p=822 ) BBR优化http://kernel.ubuntu.com/~kernel-ppa/mainline https://yum.spaceduck.org/kernel-ml-aufs/kernel-ml-aufs.repo centos12345678910111213# 下载内核curl -k https://yum.spaceduck.org/kernel-ml-aufs/kernel-ml-aufs.repo -o /ect/yum.repos.d/kernel-aufs.repoyum install -y kernel-ml-aufs# 可用内核列表grep "^menuentry" /boot/grub2/grub.cfg | cut -d "" -f2 # 复制最新内核到grub2-set-default 'CentOS Linux (x.x.x-x.elx.centos.x86_64)x(Core)'# 重启reboot#编辑bbr配置文件vi /etc/sysctl.d/88-tcp_bbr.conf#修改内容 net.core.default_qdisc=fq 以及 net.ipv4.tcp_congestion_control=bbrsysctl -p /etc/systcl.d/88-tcp_bbr.conf 1234567891011121314151617181920212223242526272829303132333435rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.orgrpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpmyum --enablerepo=elrepo-kernel install kernel-ml -yrpm -qa | grep kernelrpm -ev 旧内核 egrep ^menuentry /etc/grub2.cfg | cut -f 2 -d \'grub2-set-default 2sudo shutdown -r nowuname -rlsmod | grep bbr如果没有bbr，则modprobe tcp_bbrecho "tcp_bbr" &gt;&gt; /etc/modules-load.d/modules.confecho "net.core.default_qdisc=fq" &gt;&gt; /etc/sysctl.confecho "net.ipv4.tcp_congestion_control=bbr" &gt;&gt; /etc/sysctl.confsysctl -p查看sysctl net.ipv4.tcp_available_congestion_controlsysctl net.ipv4.tcp_congestion_control ubuntu12345678wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.x/linux-image-4.x.0-040x00-generic_4.x.0-040x00.20xxxxxxxxxx_amd64.debdpkg -i linux-image-4.x.0*.debupdate-grubecho "net.core.default_qdisc=fq" &gt;&gt; /etc/sysctl.confecho "net.ipv4.tcp_congestion_control=bbr" &gt;&gt; /etc/sysctl.confsysctl -psysctl net.ipv4.tcp_available_congestion_controllsmod | grep bbr QRcode123pip install qrcodeecho -n "ss://"echo -n aes-256-cfb:password@1.2.3.4:8388 | base64 | qr 123456789101112pip install myqr# 概括myqr Words [-v &#123;1,2,3,...,40&#125;] # 边长 [-l &#123;L,M,Q,H&#125;] # 纠错水平 [-n output-filename] # 文件名 [-d output-directory] # 存储位置 [-p picture_file] # 结合图片 [-c] # 彩色 [-con contrast] # 对比度 [-bri brightness] # 亮度 使用提示 请采用正方形或近似正方形的图片 建议在图片尺寸大的时候使用 -v 的值也应该适当变大。 如果图片有透明无色部分，最终效果是： 你可以将透明部分修改成白色，最终效果会变成 依赖库 pillow numpy imageio]]></content>
      <categories>
        <category>运维</category>
        <category>科学上网</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux安装Tomcat]]></title>
    <url>%2F2017%2F10%2FLinux%E5%AE%89%E8%A3%85Tomcat%2F</url>
    <content type="text"><![CDATA[解压缩12345# mkdir /usr/local/tomcat# cd /usr/local/tomcat# tar -zxvf /software/apache-tomcat-7.0.54.tar.gz 生成链接以便版本升级 1# ln -s apache-tomcat-7.0.54 server 启动Tomcat 123456789101112131415#cd /usr/local/tomcat/server/bin#./startup.shUsing CATALINA_BASE: /usr/local/tomcat/serverUsing CATALINA_HOME: /usr/local/tomcat/serverUsing CATALINA_TEMDIR: /usr/local/tomcat/server/tempUsing JRE_HOME: /usr/java/defaultUsing CLASS_PATH: /usr/local/tomcat/server/bin/bootstrap.jar:/usr/local/tomcat/server/bin/tomcat-juli.jarTomcat started. 测试Tomcat:打开防火墙,使外部能访问 12345# /sbin/iptables -I INPUT -p tcp --dport 8080 -j ACCEPT# service iptables save# service iptables restart 或直接修改文件/etc/sysconfig/iptables. 12345# vi /etc/sysconfig/iptables-A INPUT -p tcp -m tcp --dport 8080 -j ACCEPT# service iptables restart 在浏览器输入: http://192.168.16.133:8080如在本机可以输入: http://localhost:8080出现tomcat的页面表示安装成功. 停止Tomcat1# shell./shutdown.sh 配置web管理帐号 修改文件conf/tomcat-users.xml，在&lt;tomcat-users&gt;元素中添加帐号密码，需要指定角色. 1# vi /usr/local/tomcat/server/conf/tomcat-users.xml 123&lt;tomcat-users&gt; &lt;user name="admin" password="admin" roles="admin-gui,manager-gui" /&gt;&lt;/tomcat-users&gt; 配置web访问端口 可以修改conf目录下的文件server.xml，修改Connector元素(Tomcat的默认端口是8080)，需要重新启动Tomcat服务生效. 1vi /usr/local/tomcat/server/conf/server.xml 1&lt;Connector port="80" protocol="HTTP/1.1" connectionTimeout="20000" redirectPort="8443" /&gt; 配置https安全连接(ssl加密连接)https连接需要用到数字证书与数字签名(MD5算法)网站https连接首先需要申请数字证书，配置加密连接器，浏览器安装证书.使用java的工具keytool产生数字证书 1# keytool -genkey -alias tomcat -keyalg RSA 生成文件.keystore注意:CN为主机名称，本机可用localhost将文件.keystore放到Tomcat服务器的conf目录下 1# cp .keystore /usr/local/tomcat/server/conf/ 修改conf/server.xml文件，修改加密连接器，添加keystoreFile与keystorePass 1234567&lt;Connector port="8443" protocol="HTTP/1.1" SSLEnabled="true" maxThreads="150" scheme="https" secure="true" clientAuth="false" sslProtocol="TLS" keystoreFile="conf/.keystore" keystorePass="123456"/&gt; 重新启动tomcat.浏览器输入https://localhost:8443访问,并安装证书. Tomcat的目录结构 目录 使用 ·bin 存放Tomcat的命令脚本文件 ·conf 存放Tomcat服务器的各种配置文件,最主要是server.xml ·lib 存放Tomcat服务器支撑jar包 ·logs 存放日志文件 ·temp 存放临时文件 ·webapps web应用所在目录，外界访问web资源的存放目录 ·work Tomcat的工作目录 web应用的目录结构webapp – web应用所在目录|— html, jsp, css, js文件等 – 这些文件一般在web应用根目录下，根目录下的文件外界可以直接访问.|— WEB-INF 目录 – java类、jar包、web配置文件存在这个目录下，外界无法直接访问，由web服务器负责调用.|— classes 目录 – java类|— lib 目录 – java类运行所需要的jar包|— web.xml 文件 – web应用的配置文件 虚拟主机的配置指定虚拟主机名,修改conf/server.xml,添加元素. 123&lt;host name="hostname.domainname" appBase="/webapps"&gt;&lt;Context path="/webapp" docBase="/webapps/webapp"/&gt;&lt;/host&gt; 例: 1234&lt;host name="www.163.com" appBase="/webapps"&gt;&lt;/host&gt;&lt;host name="mail.163.com" appBase="/mailapps"&gt;&lt;/host&gt; 须设置DNS解析(host文件或DNS系统). web应用和虚拟目录的映射.可以修改xml配置文件的&lt;Context&gt;元素来设置web应用和虚拟目录的映射. xml配置文件 设置web应用和虚拟目录的映射 ·conf/server.xml 在元素下添加&lt;Context path=&quot;/webdir&quot; docBase=&quot;/webappdir&quot;/&gt; ·conf/context.xml 添加元素所有web应用有效. ·conf/[enginename]/[hostname]/context.xml.default [enginename]一般是Catalina，主机[hostname]的所有web应用有效. ·conf/[enginename]/[hostname]/ 在目录下任意建一个文件(扩展名xml),文件名即为虚拟目录名.多级目录使用#分割 .&lt;Context docBase=&quot;/webappdir&quot;/&gt; 缺省值web应用目录可以定义为ROOT.xml，添加&lt;Context docBase=&quot;/webappdir&quot;/&gt;,需重新启动Tomcat服务器 ·META-INF/context.xml 可以将web应用放在webapps目录下让Tomcat服务器自动映射，适用开发环境，实际运用环境中不用自动映射 如没有修改配置文件，web应用目录为ROOT时则为默认web应用。 web应用首页(welcome file)的配置修改web应用的配置文件: [webapp]/WEB-INF/web.xml 12345&lt;welcome-file-list&gt; &lt;welcome-file&gt;index.html&lt;/welcome-file&gt; &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt; &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;&lt;/welcome-file-list&gt;]]></content>
      <categories>
        <category>运维</category>
        <category>环境</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux常用指令]]></title>
    <url>%2F2017%2F10%2FLinux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[常用终端快捷键 功能 快捷键组合 打开新的终端窗口 Ctrl Shift n 打开新的终端标签 Ctrl Shift t 切换到第n个终端标签 Alt n 清屏 Ctrl l 相当于exit Ctrl d 剪切光标到命令提示符之间的所有字符 Ctrl u 暂停应用程序 再输入fg - 重新将程序唤到前台 Ctrl z 剪切光标至行末的内容 CTRL + K 粘贴 CTRL + Y 移动光标到行末 CTRL + E 移动光标到行首 CTRL + A 跳向下一个空格 ALT + F 跳回上一个空格 ALT + B 删除前一个单词 ALT + Backspace 剪切光标前一个单词 CTRL + W 向终端内粘贴文本 Shift + Insert 常用操作绝对路径和相对路径 绝对路径：从根目录开始的路径，一定以 / 开头 相对路径：从当前目录开始的路径，一定不以 / 开头，而可以以 .. , . 开头，其中 .. 代表当前目录的上一层目录， . 代表当前目录。 ls查看目录下的文件 - list directory contents 选项： 显示详细文件格式 -l 显示全部文件（包含隐藏文件） -a 照最后修改的日期倒序排列 -t 选项可以合并使用，例：ls -la、ll 对于命令的帮助查询 man 或者 –help输入 man ls （需要再输入q去结束）或者 ls –help 一般情况下选项中 -f (–force)强制-r (–recursive)递归 manual_page 功能 按键 向 下 翻 一 页 空格 向 下 翻 一 页 [Page Down] 向 上 翻 一 页 [Page Up] 回到首页 [Home] 跳转到最末页 [End] 向“ 下” 搜 寻 string 这 个 字符 串 /string 向“ 下” 搜 寻 n 向“ 上” 搜 寻 N 结 束 这 次 的 man page q useradduseradd命令用于Linux中创建的新的系统用户。useradd可用来建立用户帐号。帐号建好之后，再用passwd设定帐号的密码．而可用userdel删除帐号。使用useradd指令所建立的帐号，实际上是保存在/etc/passwd文本文件中。 选项 -c&lt;备注&gt;：加上备注文字。备注文字会保存在passwd的备注栏位中； -d&lt;登入目录&gt;：指定用户登入时的启始目录； -D：变更预设值； -e&lt;有效期限&gt;：指定帐号的有效期限； -f&lt;缓冲天数&gt;：指定在密码过期后多少天即关闭该帐号； -g&lt;群组&gt;：指定用户所属的群组； -G&lt;群组&gt;：指定用户所属的附加群组； -m：自动建立用户的登入目录； -M：不要自动建立用户的登入目录； -n：取消建立以用户名称为名的群组； -r：建立系统帐号； -s：指定用户登入后所使用的shell； -u：指定用户id。 常用指令 功能 指令 查看当前目录的绝对路径(print name of current/working directory) pwd 切换当前工作目录(Change the current directory to dir) cd 创建目录(make directories) mkdir 创建文件或者更新文件(change file timestamps) touch 复制文件和目录(copy files and directories) cp 删除文件或目录(remove files or directories) rm 移动文件或重命名文件(move or rename files) mv 查看文件并打印到标准输出(concatenate files and print on the standard output) cat 从最后一行开始查看到第一行(concatenate and print files in reverse) tac 输出文件的第一部分(默认前10行)(output the first part of files) head 输出文件的最后部分(默认后10行)(output the last part of files) tail 持续输出文件的最后部分 tail -f Linux管道将一个命令的标准输出作为另一个命令的标准输入。也就是把几个命令组合起来使用，后一个命令除以前一个命令的结果。 例：grep -r “close” /home/* | more 在home目录下所有文件中查找，包括close的文件，并分页输出。 打包压缩相关命令tar: 打包压缩 ​ -c 归档文件 ​ -x 压缩文件 ​ -z gzip压缩文件 ​ -j bzip2压缩文件 ​ -v 显示压缩或解压缩过程 v(view) ​ -f 使用档名 例： tar -cvf /home/abc.tar /home/abc 只打包，不压缩 tar -zcvf /home/abc.tar.gz /home/abc 打包，并用gzip压缩 tar -jcvf /home/abc.tar.bz2 /home/abc 打包，并用bzip2压缩 当然，如果想解压缩，就直接替换上面的命令tar -cvf、tar -zcvf、tar -jcvf 中的“c” 换成“x” 就可以了。 文件权限管理三种基本权限 R 读 数值表示为4 W 写 数值表示为2 X 可执行 数值表示为1 内容 r w x 文件 实际含有数据的地方 读到文件内容 修改文件内容 执行文件内容 目录 记录文件名 读到文件名 修改文件名 进入该目录的权限 -rwxrw-r–一共十个字符，分成四段。 第一个字符“-”表示普通文件；这个位置还可能会出现“l”链接；“d”表示目录 第二三四个字符“rwx”表示当前所属用户的权限。 第五六七个字符“rw-”表示当前所属组的权限。 第八九十个字符“r–”表示其他用户权限。 chmod 744 jdk-7u21-linux-i586.tar.gz vim使用vim三种模式：命令模式、插入模式、编辑模式。使用ESC或i或：来切换模式。 命令模式下： :q 退出 :q! 强制退出 :wq 保存并退出 :set nu 显示行号 :set nonu 隐藏行号 /seach 在文档中查找seach 按n跳到下一个，shift+n上一个 yyp 复制光标所在行，并粘贴 h(左移一个字符←)、j(下一行↓)、k(上一行↑)、l(右移一个字符→) 一般指令模式 按键 说明 Ctrl+f 向上翻页 Ctrl+b 向下翻页 0或home键 光标移至行首 $或END键 光标移至行末 G 文章最末。n+G为移至n行，n为数字 gg 移到这个文件的第一列 n+\ n为数字。光标向下移动n列(注：不是移动至n行) /word 向光标之下寻找一个名称为word的字符 :1,$s/word1/word2/gc 从第一列到最末页查找word1字符并替换为word2,并提示是否(confirm)确认取代 x,X x为向后删一个字符,X为向前删一个字符 dd 删除光标所在的那一整列 ndd n为数字。删除光标所在的向下的n列。(所在行为第一行) yy 复制光标所在的一整列 nyy n为数字。复制光标所在的向下的n列。 p,P p粘贴在光标下一列。P粘贴在光标上一列。 u 复原前一个动作。 [Ctrl]+r 重做上一个动作。 . 重复前一个动作。 切换至编辑模式 按键 说明 i，I i-在光标处插入，I-在光标所在列第一个非空白字符处开始插入 a，A a-在光标下个字符处插入，A-在光标所在列最后一个字符处插入 o，O o-在光标下一列插入，O-在光标上一列插入 r，R r-取代光标处字符一次，R-一直取代光标所在字符处，直到按下EXC为止 按Esc回到一般命令模式 切换至命令行模式 按键 说明 :w 将编辑的内容写入文件 :q 退出vi :wq 保存并退出 :set nu 显示行号]]></content>
      <categories>
        <category>运维</category>
        <category>指令</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux安装Superset]]></title>
    <url>%2F2017%2F10%2FLinux%E5%AE%89%E8%A3%85Superset%2F</url>
    <content type="text"><![CDATA[Superset是一款很棒的数据可视化开源方案，熟练运用它可以省去不少在Excel中做图的时间。 安装依赖123$ yum upgrade python-setuptools$ yum install gcc gcc-c++ libffi-devel python-devel python-pip python-wheel openssl-devel libsasl2-devel openldap-devel sqlite-devel$ pip install --upgrade setuptools pip 安装superset1234567891011121314151617181920212223242526272829# Install superset$ pip install superset# 建议使用国内源$ pip install superset -i http://pypi.douban.com/simple --trusted-host=pypi.douban.com# 如果安装报错，根据报错的内容补全依赖，例：g++: error trying to exec 'cc1plus': execvp: 没有那个文件或目录$ yum install gcc-c++# 若有包源丢失，例如numpy包缺少，可手动安装$ pip install numpy -i http://pypi.douban.com/simple --trusted-host=pypi.douban.com# Create an admin user (you will be prompted to set username, first and last name before setting a password)$ fabmanager create-admin --app superset# Initialize the database$ superset db upgrade# Load some data to play with$ superset load_examples# Create default roles and permissions$ superset init# Start the web server on port 8088, use -p to bind to another port$ superset runserver# 推荐使用nohup$ nohup superset runserver -p 8088 &amp; 登录浏览器输入localhost:8088 说明配置文档位置$PYTHONPATH/superset/config.py 官方文档：http://airbnb.io/superset/installation.html 开源地址：https://github.com/airbnb/superset 链接数据库Here’s a list of some of the recommended packages.SqlAlchemy docs database pypi package SQLAlchemy URI prefix MySQL pip install mysqlclient mysql:// Postgres pip install psycopg2 postgresql+psycopg2:// Presto pip install pyhive presto:// Oracle pip install cx_Oracle oracle:// sqlite sqlite:// Redshift pip install sqlalchemy-redshift postgresql+psycopg2:// MSSQL pip install pymssql mssql:// Impala pip install impyla impala:// SparkSQL pip install pyhive jdbc+hive:// Greenplum pip install psycopg2 postgresql+psycopg2:// Athena pip install &quot;PyAthenaJDBC&gt;1.0.9&quot; awsathena+jdbc:// Vertica pip install sqlalchemy-vertica-python vertica+vertica_python:// ClickHouse pip install sqlalchemy-clickhouse clickhouse:// 修改表单On the resulting page, click on the List Table Column tab. Here, you’ll define the way you can use specific columns of your table when exploring your data. We’ll run through these options to describe their purpose: If you want users to group metrics by a specific field, mark it as Groupable. If you need to filter on a specific field, mark it as Filterable. Is this field something you’d like to get the distinct count of? Check the Count Distinct box. Is this a metric you want to sum, or get basic summary statistics for? The Sum, Min, and Maxcolumns will help. The is temporal field should be checked for any date or time fields. We’ll cover how this manifests itself in analyses in a moment. Unicode1&quot;mysql+pymysql://scott:tiger@localhost/test?charset=utf8&quot;]]></content>
      <categories>
        <category>运维</category>
        <category>环境</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux安装JDK]]></title>
    <url>%2F2017%2F10%2FLinux%E5%AE%89%E8%A3%85JDK%2F</url>
    <content type="text"><![CDATA[Linux下安装一些开发工具是必备技能，本文以安装jdk为例，详细记录了每一步的操作命令，以供参考。 下载jdk登录网址：http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html选择对应jdk版本下载。（可在Windows下下载完成后，通过文件夹共享到Linux上） 登录Linux，切换到root用户su root 获取root用户权限，当前工作目录不变(需要root密码) 在usr目录下建立java安装目录cd /usrmkdir java 将jdk拷贝到java目录下mv /mnt/hgfs/linux/jdk-8u60-linux-x64.tar.gz /usr/java/ 解压jdktar -zxvf jdk-8u60-linux-x64.tar.gz得到文件夹 jdk1.8.0_60 建立链接安装完毕为他建立一个链接以节省目录长度(我没用这一步)ln -s /usr/java/jdk1.8.0_60/ /usr/jdk 编辑配置文件配置环境变量 vim /etc/profile添加如下内容：JAVA_HOME根据实际目录来exprot JAVA_HOME=/usr/java/jdk1.8.0_60exprot CLASSPATH=$JAVA_HOME/lib/exprot PATH=\$PATH:$JAVA_HOME/binexport PATH JAVA_HOME CLASSPATH 配置环境变量(详细) vi /etc/profile export JAVA_HOME=/usr/java/defaultexport JAVA_BIN=$JAVA_HOME/binexport PATH=\$PATH:$JAVA_HOME/binexport CLASSPATH=.:\$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarexport PATH=\$JAVA_HOME/bin:\$JRE_HOME/bin:$PATH 重启机器或执行命令 ：source /etc/profile 查看安装情况java -version 12345java version "1.8.0_60"Java(TM) SE Runtime Environment (build 1.8.0_60-b27)Java HotSpot(TM) Client VM (build 25.60-b23, mixed mode)]]></content>
      <categories>
        <category>开发</category>
        <category>运维</category>
        <category>环境</category>
        <category>Java系列</category>
        <category>环境</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux安装Git]]></title>
    <url>%2F2017%2F10%2FLinux%E5%AE%89%E8%A3%85Git%2F</url>
    <content type="text"><![CDATA[安装步骤 首先更新系统 1sudo yum update 安装依赖包 12shellsudo yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker 下载git源码并解压缩 123$ wget https://github.com/git/git/archive/v2.9.4.zip$ unzip v2.9.4.zip$ cd git-2.9.4 或者使用tarball解压到指定目录，例/usr/local 1tar -zxvf git-2.9.4.tar.gz -C /usr/local/ 编译安装 将其安装在指定目录，例/usr/local/git 12sudo make prefix=/usr/local/git allsudo make install prefix=/usr/local/git 修改并应用环境变量 1234sudo vi /etc/profile#文件最后一行添加以下内容export PATH=/usr/local/git/bin:$PATHsource /etc/profile 查看git版本 1git --version 设置git12git config --global user.name &quot;Your Name&quot;git config --global user.email &quot;youremail@domain.com&quot; 添加SSH Keys以公钥认证方式访问SSH协议的Git服务器时无需输入口令，而且更安全。（访问HTTP协议的Git服务器时，比如提交修改，每次都需要输入口令。） 创建SSH key 1$ ssh-keygen -t rsa -C "youremail@163.com" 系统会提示key的保存位置（一般是~/.ssh目录）和指定口令，保持默认，连续三次回车即可。 Copy SSH Key 然后用vim打开该文件，id_rsa.pub文件内的内容，粘帖到github帐号管理的添加SSH key界面中。 1vim ~/.ssh/id_rsa.pub 添加到GitHub 登录github-&gt; Accounting settings图标-&gt; SSH key-&gt; Add SSH key-&gt; 填写SSH key的名称（可以起一个自己容易区分的），然后将拷贝的~/.ssh/id_rsa.pub文件内容粘帖-&gt; add key”按钮添加。 测试 1ssh -T git@github.com WINDOWS下报换行错误 git config –global core.autocrlf false]]></content>
      <categories>
        <category>开发</category>
        <category>运维</category>
        <category>环境</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Intellij快捷键]]></title>
    <url>%2F2017%2F10%2FIntellij%E5%BF%AB%E6%8D%B7%E9%94%AE%2F</url>
    <content type="text"><![CDATA[代码方法/变量使用处搜索： Alt + F7 查找当前文件变量/方法的使用处 Ctrl+F7 查找当前项目变量/方法的使用处 Ctrl +Shift+ F7 高亮显示变量/方法名在当前文件的所有使用处 Ctrl + Alt + F7 弹窗显示变量/方法名在当前文件的使用处列表 tips: Shift加上小写字母效果等同于按键使用大写字母。即：Shift + t == T 编辑类 按键 说明 Ctrl + p 参数信息（在方法调用参数时使用） Ctrl + q Doc说明文档快速查看 Shift + F1 查看外部doc文档 Ctrl +鼠标放在代码上面 代码的简要doc说明（基本上是类或者方法的声明） Ctrl + Alt + t 将光标所处行的代码用语句块（if…else、try…catch…）包围 Ctrl + / 注释/反注释光标所在行 Ctrl + w 递增地（代码块所包含的范围增大）选择连续的代码块 Ctrl + Shift + w 在用了Ctrl + w后，减小代码块所包含的范围 Alt + q 上下文信息 Alt + Enter 显示意图动作和快速修复 Ctrl + Alt + L 代码格式化 Ctrl + Alt + o 优化Imports（去掉不必要的） Tab / Shift + Tab 缩进/反缩进所选行 Ctrl+x or Shift + Delete 剪切行/代码块到剪贴板(默认全选一行) Ctrl + c or Ctrl + Insert 复制行/代码块到剪贴板(默认全选一行) Ctrl + v or Shift + Insert 粘贴剪贴板中的内容 Ctrl + Shift + v 粘贴剪贴板中缓存的内容 Ctrl + d 复制当前行/代码块的一个副本并插入到内容中 Ctrl + y 删除光标所在行 Ctrl + Shift +j 智能行合并(在本行任何位置，自动删除本行的回车键和空格，将下一行字符连接到本行) Ctrl + Enter 智能分行(和Enter键的区别：光标不动，在本行下面新增一行) Shift + Enter 开始新的一行(相当于在行末按Enter键) Ctrl + Shift + u 变换光标所在处/代码块的字母的大小写状态 Ctrl + Shift + ] / [ 从光标处向上或向下选择代码块 Ctrl + Delete 删除光标后的一个单词 Ctrl + Backspace 删除光标前的一个单词 Ctrl + Shift + 数字键盘的+ 展开所有代码块 Ctrl + Shift + 数字键盘的- 折叠所有代码块 Ctrl + F4 关闭当前tab页 搜索/替换 按键 说明 双击Shift 万能搜索 Ctrl + f 查找 F3 查找下一个 Shift + F3 查找上一个 Ctrl + r 替换 Ctrl + Shift + r 在指定路径中的文件中替换内容 Ctrl + Shift + s Search structurally (Ultimate Edition only) Ctrl + Shift + m Replace structurally (Ultimate Edition only) 编译和运行 按键 说明 Alt + Shift + F10 选择配置并运行 Alt + Shift + F9 选择配置并调试 Shift + F10 运行 Shift + F9 调试 Ctrl + Shift + F10 配置编辑器运行环境 调试 按键 说明 F8 Step over (步越：越过子函数，但子函数会执行) F7 Step into (步进：进入子函数) Shift + F7 Smart step into(智能步进) Shift + F8 Step out (跳出：跳出子函数) Alt + F9 Run to cursor (运行到光标处) Alt + F8 Evaluate expression (计算表达式) F9 Resume program (恢复程序) Ctrl + F8 Toggle breakpoint (切换断点) Ctrl + Shift + F8 View breakpoints (查看断点) 导航 按键 说明 Ctrl + n 跳转到某个类文件 Ctrl + Shift + n 跳转到某个文件 Ctrl + Alt + Shift + N 跳转到某个标识符处，包括类名，方法，变量 Alt + 左/右 箭头 切换到左边/右边的编辑标签 F12 打开上一次打开的工具窗口 Esc 从工具窗口回到编辑窗口 Shift + Esc 隐藏活动的工具窗口并回到编辑窗口中 Ctrl + Shift + F4 关闭活动的run/messages/find/…窗口 Ctrl + g 跳转到某行 Ctrl + e 弹出一个菜单，上面包含最近打开的文件和工具窗 Ctrl + Alt + 向左/向右 箭头 跳转到上一个/下一个 Ctrl + Shift + Backspace 跳转到上一次做出修改的地方 Ctrl + b or Ctrl + Click 跳转到方法或者变量的声明处 Ctrl + Shift + i 打开类/方法/变量的文档说明窗口 Alt + Up/Down 跳转到上一个/下一个方法的第一行处 Ctrl + F12 弹出文件的结构窗口 (方法、常量等) F2 / Shift + F2 跳转到下一个/上一个错误处并高亮显示 F4 查看/改变源代码 Alt + Home 打开路径导航条 F11 设置/取消书签 Ctrl + F11 设置带数字/字母编号的书签 Ctrl + #[0-9] 跳转到[0-9]编号的书签处 Shift + F11 在弹出窗口中显示所有的书签 重构 按键 F5 复制 F6 移动 Alt + Delete 安全删除 Shift + F6 重命名 (批量) Ctrl + F6 修改方法(修饰符、方法名、参数列表、返回值、异常等) Ctrl + Alt + n 内嵌(可以将变量替换为其他内容) Ctrl + Alt + m 提取成方法 Ctrl + Alt + v 提取成变量 Ctrl + Alt + f 提取成字段 Ctrl + Alt + c 提取成常量 Ctrl + Alt + p 提取成参数 版本控制 按键 说明 Ctrl + k 提交项目到vcs Ctrl + t 从vcs中更新项目 Alt + Shift + c 查看最近更新 Alt + 反引号 vcs快速设置弹出菜单 通用快捷键 按键 说明 Alt + #[0-9] 打开相对应的工具窗口 Ctrl + s 保存全部 Ctrl + Alt + y 同步 Ctrl + Shift + F12 编辑器最大化 Alt + Shift + f 添加到最喜欢 Alt + Shift + i 根据当前配置文件审查当前文件 Ctrl + Alt + s 打开设置 Ctrl + Alt + Shift + s 打开项目结构对话框，在这里可以删除模块 Ctrl + Tab 在已打开的文件和工具窗口之间切换 Ctrl + Shift + a 查找所有快捷操作（基本所有的动作在这里都可以找到）]]></content>
      <categories>
        <category>开发</category>
        <category>Intellij</category>
      </categories>
      <tags>
        <tag>dev</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python命名规范]]></title>
    <url>%2F2017%2F10%2FPython%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83%2F</url>
    <content type="text"><![CDATA[Tips： module_name package_name ClassName method_name ExceptionName function_name GLOBAL_VAR_NAME instance_var_name function_parameter_name local_var_name 应该避免的名称1. 单字符名称, 除了计数器和迭代器. 2. 包/模块名中的连字符(-) 3. 双下划线开头并结尾的名称(Python保留, 例如__init__) 命名约定1. 所谓”内部(Internal)”表示仅模块内可用, 或者, 在类内是保护或私有的. 2. 用单下划线(_)开头表示模块变量或函数是protected的(使用import * from时不会包含). 3. 用双下划线(__)开头的实例变量或方法表示类内私有. 4. 将相关的类和顶级函数放在同一个模块里. 不像Java, 没必要限制一个类一个模块. 5. 对类名使用大写字母开头的单词(如CapWords, 即Pascal风格), 但是模块名应该用小写加下划线的方式(如lower_with_under.py). 尽管已经有很多现存的模块使用类似于CapWords.py这样的命名, 但现在已经不鼓励这样做, 因为如果模块名碰巧和类名一致, 这会让人困扰. Python之父Guido推荐的规范 Type Public Internal Modules(模块) lower_with_under _lower_with_under Packages(包) lower_with_under Classes(类) CapWords _CapWords Exceptions(异常) CapWords Functions(函数) lower_with_under() _lower_with_under() Global/Class(全局/类) Constants(常量) CAPS_WITH_UNDER _CAPS_WITH_UNDER Global/Class Variables(变量) lower_with_under _lower_with_under Instance Variables (实例化对象) lower_with_under _lower_with_under (protected) or __lower_with_under (private) Method Names(方法名) lower_with_under() _lower_with_under() (protected) or __lower_with_under() (private) Function/Method Parameters(参数) lower_with_under Local Variables(局部变量) lower_with_under]]></content>
      <categories>
        <category>开发</category>
        <category>Py系列</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[code smell(代码异味)]]></title>
    <url>%2F2017%2F10%2Fcode-smell-%E4%BB%A3%E7%A0%81%E5%BC%82%E5%91%B3%2F</url>
    <content type="text"><![CDATA[Code Smell中文译名一般为“代码异味”，或“代码味道”，它是提示代码中某个地方存在错误的一个暗示，开发人员可以通过这种smell（异味）在代码中追捕到问题。 在计算机编程社区中，code smell代表了任何标志着事物变坏的征兆。它常常标志代码应该被refactored或者全部的设计都应该被reviewed。这个短语出现在 WardsWiki上，它是被Kent Beck杜撰出来的。在refactoring兴起之后，这个短语的使用率骤增。 判断是否存在code smell经常是主观判断，并且随着语言、开发者、开发理论的不同而存在差异。 经验丰富和知识渊博的开发人员通过对优秀设计有一种“感觉”，他们已经达到一种称之为“无意识能力 （Unconscious Competence）”的状态。也就是说，他们无需思考，只要通过查看代码或一段设计就可以立马对这个项目的代码质量有一种 “感觉”，能够对代码设计的优劣有一个大致的判断。 但大家需要注意，code smell只是一种“暗示”，而非一种“确定”。将某些事物称之为“code smell”并未是一种攻击，它只是一种提示：开发人员需要对项目设计进行更进一步的查看。因此，code smell更多是“直觉的，本能的”。 Application-level smells: 重复代码(Duplicate Code) 代码重复几乎是最常见的异味了。代码重复往往来自于copy-and-paste的编程风格。 Contrived complexity 强制使用过于复杂的设计模式，而简单的设计就已经足够了。 Class-level smells: 大类(Large Class) 大类就是你把太多的责任交给了一个类。这里的规则是One Class One。 依恋情节(Featury Envy) 对其它对象中的数据太感兴趣了 不合适的亲密(Inappropriate Intimacy) 某些类相互之间太亲密，它们花费了太多的时间去砖研别人的私有部分。对人类而言，我们也许不应该太假正经，但我们应当让自己的类严格遵守禁欲主义。 被拒绝的继承(Refused Bequest) 父类传下来很多行为和状态，而子类只是用了其中的很小一部分。这通常意味着你的类层次有问题。 惰类(Lazy Class) 一个干活不多的类。类的维护需要额外的开销，如果一个类承担了太少的责任，应当消除它。 过多的使用常量(Excessive use of literals) 将常量命名以提高可读性并避免编程错误 圈复杂度(Cyclomatic complexity) 大量的循环和分支；这可能表明了一个功能需要细分或者尽可能的简化。 数据泥团(Data Clumps) 某些数据通常像孩子一样成群玩耍：一起出现在很多类的成员变量中，一起出现在许多方法的参数中……，这些数据或许应该自己独立形成对象。 Method-level smells: 参数太多(Long Parameter List) 对象含有状态，不需要太多的参数 过长的函数(Long Method) 它是传统结构化的“遗毒”。一个方法应当具有自我独立的意图，不要把几个意图放在一起，特别注意大类和长方法。 不一致的变化(Divergent Change) 一个类里面的内容变化率不同。某些状态一个小时变一次，某些则几个月一年才变一次；某些状态因为这方面的原因发生变化，而另一些则因为其他方面的原因变一 次。面向对象的抽象就是把相对不变的和相对变化相隔离。把问题变化的一方面和另一方面相隔离。这使得这些相对不变的可以重用。问题变化的每个方面都可以单 独重用。这种相异变化的共存使得重用非常困难。 散弹式修改(Shotgun Surgery) 对系统一个地方的改变涉及到其他许多地方的相关改变。这些变化率和变化内容相似的状态和行为通常应当放在同一个类中。 基本类型偏执(Primitive Obsession) 用类代替原始数据类型。面向对象的新手通常习惯使用几个原始类型的数据来表示一个概念。譬如对于范围，他们会使用两个数字。对于Money，他们会用一个浮点数来表示。因为你没有使用对象来表达问题中存在的概念，这使得代码变的难以理解，解决问题的难度大大增加。好的习惯是扩充语言所能提供原始类型，用小对象来表示范围、金额、 转化率、邮政编码等等。 开关语句(Switch Statement) 基于常量的开关语句是OO 的大敌，你应当把他变为子类、state 或strategy。 并行继承层次(Parallel Inheritance Hierarchies) 并行的继承层次是shotgun surgery 的特殊情况。因为当你改变一个层次中的某一个类时，你必须同时改变另外一个层次的并行子类。 投机通则(Speculative Generality) 一个类实现了从未用到的功能和通用性。通常这样的类或方法唯一的用户是test case。不要犹豫，删除它。 令人迷惑的临时字段(Temporary Field) 一个对象的属性可能只在某些情况下才有意义。这样的代码将难以理解。专门建立一个对象来持有这样的孤儿属性，把只和他相关的行为移到该类。最常见的是一个特定的算法需要某些只有该算法才有用的变量。 消息链(Message Chain) 消息链发生于当一个客户向一个对象要求另一个对象，然后客户又向这另一对象要求另一个对象，再向这另一个对象要求另一个对象，如此如此。这时，你需要隐藏分派。 中间人(Middle Man) 对象的基本特性之一就是封装，而你经常会通过分派去实现封装。但是这一步不能走得太远，如果你发现一个类接口的一大半方法都在做分派，你可能需要移去这个中间人。 异曲同工的类(Alternative Classes with Different Interfaces) 不完整的类库(Incomplete Library Class) 要建立一个好的类库非常困难。我们大量的程序工作都基于类库实现。然而，如此广泛而又相异的目标对库构建者提出了苛刻的要求。库构建者也不是万能的。有时 候我们会发现库类无法实现我们需要的功能。而直接对库类的修改有非常困难。这时候就需要用各种手段进行Refactoring。 数据类(Data Class) 对象包括状态和行为。如果一个类只有状态没有行为，那么肯定有什么地方出问题了。 注释(Comments) 经常觉得要写很多注释表示你的代码难以理解。如果这种感觉太多，表示你需要Refactoring。 FROM:https://en.wikipedia.org/wiki/Code_smell]]></content>
      <categories>
        <category>开发</category>
        <category>重构</category>
      </categories>
      <tags>
        <tag>dev</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WIN使用Miniconda]]></title>
    <url>%2F2017%2F10%2FWIN%E4%BD%BF%E7%94%A8Miniconda%2F</url>
    <content type="text"><![CDATA[我应该下载Anaconda还是Miniconda？选择Anaconda： 最先支持conda和python 一次性安装150多个常用软件包使python的使用更加方便 有充裕的时间和磁盘空间 不想每次使用时都需要安装一遍软件包 Anaconda download: http://continuum.io/downloads 选择Miniconda： 只想快速使用python和conda命令 Miniconda download: https://conda.io/miniconda.html Miniconda安装Windows下环境变量配置 12345C:\Miniconda3;C:\Miniconda3\Library\mingw-w64\bin;C:\Miniconda3\Library\usr\bin;C:\Miniconda3\Library\bin;C:\Miniconda3\Scripts; Miniconda环境管理123456789101112131415161718192021222324# 创建一个名为python36的环境，指定Python版本是3.6conda create --name Python36 python=3.6# 安装好后，使用activate激活某个环境activate Python36 # 激活后，命令行前显示当前环境名称(Python36)# 此时，再次输入python --version# 可以得到Python 3.6.2 :: Continuum Analytics，Inc. 即系统已经切换到了3.6的环境# 如果想返回root环境，运行deactivate python36# 列出所有环境conda info --envs# 克隆环境conda create --name Pythont --clone Python36# 删除一个已有的环境conda remove --name python36 --all Miniconda包管理123456789101112131415161718192021222324252627282930# 查看当前环境下已安装的包conda list# 查看某个指定环境的已安装包conda list -n Python36# 查找package信息conda search numpy# 安装packageconda install -n Python36 numpy# 如果不用-n指定环境名称，则被安装在当前活跃环境# 也可以通过-c指定通过某个channel安装# 更新packageconda update -n Python36 numpy# 删除packageconda remove -n Python36 numpy# 在当前环境下安装anaconda包集合conda install anaconda# 结合创建环境的命令，以上操作可以合并为conda create -n python35 python=3.5 anaconda# 也可以不用全部安装，根据需求安装自己需要的package即可# 用pip安装包# 对于不适用于conda或Anaconda.org的软件包，我们可以选择使用pip安装软件包pip install see conda配置默认情况下不生成.condarc文件，会在第一次使用的时候自动在主目录创建。 例：C:\Users\Administrator\.condarc conda配置文件可用于更改： conda寻找包裹的地方 是否以及如何使用代理服务器 conda在何处列出已知的环境 是否使用当前激活的环境名称展示在bash提示符前 用户构建的软件包是否应该上传到Anaconda.org 是否在新环境中包含默认的软件包或功能 等等。 设置channels 例：国内镜像 1conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ 或修改配置文件.condarc 1234channels: - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ - file:///some/local/directory#为单个环境修改通道 - defaults 注意：对于Windows用户，URL的末尾需要斜杠（/）。 自动更新conda 当为True时，每当用户在根环境中更新或安装软件包时，自动更新conda。 当为False时，只有手动更新conda。 默认是True。 可以通过编辑.condarc文件或使用命令行。 conda config --set auto_update_conda False 操作默认选择yes 当要求选择是否以进入下一步是，自动选择yes。比如说下载的时候。 默认是False。]]></content>
      <categories>
        <category>开发</category>
        <category>Py系列</category>
        <category>环境</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux安装pyenv]]></title>
    <url>%2F2017%2F10%2FLinux%E5%AE%89%E8%A3%85pyenv%2F</url>
    <content type="text"><![CDATA[安装python依赖123$ yum -y update$ yum groupinstall -y development$ yum install -y zlib-dev readline-devel openssl-devel sqlite-devel bzip2-devel 通过GIT安装(推荐)1$ curl -L https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer | bash 修改配置文件编辑配置文件vi ~/.bash_profile写入一下指令： 1234export PYENV_ROOT="$HOME/.pyenv"export PATH="$PYENV_ROOT/bin:$PATH"eval "$(pyenv init -)"eval "$(pyenv virtualenv-init -)" 命令行使用source指令使配置生效source ~/.bash_profile 安装python一般情况下python install指令下载缓慢，我们在~/.pyenv目录下创建一个cache文件夹存放python的tarball。 12$ cd $HOME/.pyenv$ mkdir cache 将tarball移动到cache目录下 1$ mv Python-x.x.x.tar.xz $HOME/.pyenv/cache 然后再使用指令 1$ pyenv install Python-x.x.x.tar.xz 注意使用pyenv rehash指令创建 shims 更新pyenv版本:pyenv update 卸载Uninstall: pyenv is installed within $PYENV_ROOT (default: ~/.pyenv). To uninstall, just remove it: 1$ rm -fr ~/.pyenv and remove these three lines from .bashrc: 1234export PYENV_ROOT="$HOME/.pyenv"export PATH="$PYENV_ROOT/bin:$PATH"eval "$(pyenv init -)"eval "$(pyenv virtualenv-init -)" If you need, export USE_GIT_URI to use git:// instead of https:// for git clone. 使用pyenv versions 查看当前 pyenv 可检测到的所有版本，处于激活状态的版本前以 * 标示。 pyenv install pyenv install x.x.x安装一个版本 pyenv uninstall pyenv uninstall x.x.x卸载一个版本 pyenv rehash 为所有已安装的可执行文件 （如：~/.pyenv/versions/*/bin/*） 创建 shims，因此，每当你增删了 Python 版本或带有可执行文件的包（如 pip）以后，都应该执行一次本命令 pyenv global 设置面向程序的本地版本，通过将版本号写入当前目录下的 .python-version 文件的方式。通过这种方式设置的 Python 版本优先级较 global 高。pyenv 会从当前目录开始向上逐级查找 .python-version 文件，直到根目录为止。若找不到，就用 global 版本。 pyenv shell 设置面向 shell 的 Python 版本，通过设置当前 shell 的 PYENV_VERSION 环境变量的方式。这个版本的优先级比 local 和 global 都要高。--unset 参数可以用于取消当前 shell 设定的版本。 Using pyenv virtualenv1$ pyenv virtualenv 3.6.1 venv36 Create virtualenv from current version123$ pyenv version3.6.1 (set by /home/yyuu/.pyenv/version)$ pyenv virtualenv venv36 使用virtualenv1$ pyenv shell/global venv36 Activate virtualenvSome external tools (e.g. jedi) might require you to activate the virtualenv and conda environments. If eval &quot;$(pyenv virtualenv-init -)&quot; is configured in your shell, pyenv-virtualenv will automatically activate/deactivate virtualenvs on entering/leaving directories which contain a .python-version file that lists a valid virtual environment. .python-version files denote local Python versions and can be created and deleted with the pyenv local command. You can also activate and deactivate a pyenv virtualenv manually: 12pyenv activate &lt;name&gt;pyenv deactivate Delete existing virtualenvRemoving the directories in $(pyenv root)/versions and $(pyenv root)/versions/{version}/envs will delete the virtualenv, or you can run: 1pyenv uninstall my-virtual-env]]></content>
      <categories>
        <category>开发</category>
        <category>运维</category>
        <category>Py系列</category>
        <category>环境</category>
        <category>环境</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[web测试方法总结]]></title>
    <url>%2F2017%2F10%2Fweb%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[输入框字符型输入框 字符型输入框：英文全角、英文半角、数字、空或者空格、特殊字符“~！@#￥%……&amp;*？[]{}”特别要注意单引号和&amp;符号。禁止直接输入特殊字符时，使用“粘贴、拷贝”功能尝试输入 长度检查：最小长度、最大长度、最小长度-1、最大长度+1、输入超工字符比如把整个文章拷贝过去 空格检查：输入的字符间有空格、字符前有空格、字符后有空格、字符前后有空格 多行文本框输入：允许回车换行、保存后再显示能够保存输入的格式、仅输入回车换行，检查能否正确保存（若能，检查保存结果，若不能，查看是否有正常提示） 安全性检查：输入特殊字符串null,NULL, ,javascript,\&lt;script&gt;,\&lt;/script&gt;,\&lt;title&gt;,\&lt;html&gt;,\&lt;td&gt;、输入脚本函数\&lt;script&gt;alert(&quot;abc&quot;)\&lt;/script&gt;)、doucment.write(&quot;abc&quot;)、\&lt;b&gt;hello\&lt;/b&gt; 数值型输入框 边界值：最大值、最小值、最大值+1、最小值-1 位数：最小位数、最大位数、最小位数-1最大位数+1、输入超长值、输入整数 异常值、特殊字符： 输入空白（NULL）、空格或”~!@#$%^&amp;*()_+{}|[]\:”&lt;&gt;?;’,./?;:’-=等可能导致系统错误的字符。 禁止直接输入特殊字符时，尝试使用粘贴拷贝查看是否能正常提交。 word中的特殊功能，通过剪贴板拷贝到输入框，分页符，分节符类似公式的上下标等、数值的特殊符号如∑，㏒，㏑，∏，+，-等。 输入负整数、负小数、分数、输入字母或汉字、小数（小数前0点舍去的情况，多个小数点的情况）、首位为0的数字如01、02、科学计数法是否支持1.0E2、全角数字与半角数字、数字与字母混合、16进制，8进制数值、货币型输入（允许小数点后面几位）、 安全性检查：复制粘贴输入 日期型输入框 合法性检查：(输入0日、1日、32日)、月输入[1、3、5、7、8、10、12]、日输入[31]、月输入[4、6、9、11]、日输入[30][31]、输入非闰年，月输入[2]，日期输入[28、29]、输入闰年，月输入[2]、日期输入[29、30]、月输入[0、1、12、13] 异常值、特殊字符：输入空白或NULL、输入~！@#￥%……&amp;*（）{}[]等可能导致系统错误的字符 安全性检查：不能直接输入，就copy，是否数据检验出错 信息重复:在一些需要命名,且名字应该唯一的信息输入重复的名字或ID,看系统有没有处理,会否报错,重名包括是否区分大小写,以及在输入内容的前后输入空格,系统是否作出正确处理 搜索功能若查询条件为输入框，则参考输入框对应类型的测试方法 功能实现 如果支持模糊查询，搜索名称中任意一个字符是否能搜索到 比较长的名称是否能查到 输入系统中不存在的与之匹配的条件 用户进行查询操作时，一般情况是不进行查询条件的清空，除非需求特殊说明 组合测试 不同查询条件之间来回选择，是否出现页面错误（单选框和多选框最容易出错） 测试多个查询条件时，要注意查询条件的组合测试，可能不同组合的测试会报错。 添加&amp;修改功能特殊键 是否支持Tab键 是否支持回车键 提示信息 不符合要求的地方是否有错误提示 唯一性 字段唯一的，是否可以重复添加，添加后是否能修改为已存在的字段（字段包括区分大小写以及在输入的内容前后输入空格，保存后，数据是否真的插入到数据库中，注意保存后数据的正确性） 数据正确性 对编辑页的每个编辑项进行修改，点击保存，是否可以保存成功，检查想关联的数据是否得到更新 进行必填项检查（即是否给出提示以及提示后是否依然把数据存到数据库中；是否提示后出现页码错乱等） 是否能够连续添加（针对特殊情况） 在编辑的时候，注意编辑项的长度限制，有时在添加的时候有，在编辑的时候却没有（注意要添加和修改规则是否一致） 对于有图片上传功能的编辑框，若不上传图片，查看编辑页面时是否显示有默认的图片，若上传图片，查看是否显示为上传图片 修改后增加数据后，特别要注意查询页面的数据是否及时更新，特别是在首页时要注意数据的更新 提交数据时，连续多次点击，查看系统会不会连续增加几条相同的数据或报错 若结果列表中没有记录或者没选择某条记录，点击修改按钮，系统会抛异常 删除功能特殊键 是否支持Tab键 是否支持回车键 提示信息 不选择任何信息，直接点击删除按钮，是否有提示 删除某条信息时，应该有确认提示 数据实现 是否能连续删除多个产品 当只有一条数据时，是否可以删除成功 删除一条数据后，是否可以添加相同的数据 如系统支持批量删除，注意删除的信息是否正确 如有全选，注意是否把所有的数据删除 删除数据时，要注意相应查询页面的数据是否及时更新 如删除的数据与其他业务数据关联，要注意其关联性（如删除部门信息时，部门下游员工，则应该给出提示） 如果结果列表中没有记录或没有选择任何一条记录，点击删除按钮系统会报错。 如：某一功能模块具有最基本的增删改查功能，则需要进行以下测试 单项功能测试（增加、修改、查询、删除） 增加——&gt;增加——&gt;增加 （连续增加测试） 增加——&gt;删除 增加——&gt;删除——&gt;增加 （新增加的内容与删除内容一致） 增加——&gt;修改——&gt;删除 修改——&gt;修改——&gt;修改 （连续修改测试） 修改——&gt;增加（新增加的内容与修改前内容一致） 修改——&gt;删除 修改——&gt;删除——&gt;增加 （新增加的内容与删除内容一致） 删除——&gt;删除——&gt;删除 （连续删除测试） 注册&amp;登陆模块注册功能 注册时，设置密码为特殊版本号，检查登录时是否会报错 注册成功后，页面应该以登陆状态跳转到首页或指定页面 在注册信息中删除已输入的信息，检查是否可以注册成功。 登陆功能 输入正确的用户名和正确的密码 输入正确的用户名和错误的密码 输入错误的用户名和正确的密码 输入错误的用户名和错误的密码 不输入用户名和密码（均为空格） 只输入用户名，密码为空 用户名为空，只输入密码 输入正确的用户名和密码，但是不区分大小写 用户名和密码包括特殊字符 用户名和密码输入超长值 已删除的用户名和密码 登录时，当页面刷新或重新输入数据时，验证码是否更新 上传图片测试功能实现 文件类型正确、大小合适 文件类型正确，大小不合适 文件类型错误，大小合适 文件类型和大小都合适，上传一个正在使用中的图片 文件类型大小都合适，手动输入存在的图片地址来上传 文件类型和大小都合适，输入不存在的图片地址来上传 文件类型和大小都合适，输入图片名称来上传 不选择文件直接点击上传，查看是否给出提示 连续多次选择不同的文件，查看是否上传最后一次选择的文件 查询结果列表功能实现 列表、列宽是否合理 列表数据太宽有没有提供横向滚动 列表的列名有没有与内容对应 列表的每列的列名是否描述的清晰 列表是否把不必要的列都显示出来 点击某列进行排序，是否会报错（点击查看每一页的排序是否正确） 双击或单击某列信息，是否会报错 返回键检查 一条已经成功提交的记录，返回后再提交，是否做了处理 检查多次使用返回键的情况，在有返回键的地方，返回到原来的页面多次，查看是否会出错 回车键检查 在输入结果后，直接按回车键，看系统如何处理，是否会报错 刷新键检查 在Web系统中，使用刷新键，看系统如何处理，是否会报错 直接URL链接检查 在Web系统中，在地址栏直接输入各个功能页面的URL地址，看系统如何处理，是否能够直接链接查看（匿名查看），是否有权限控制，是否直接执行，并返回相应结果页 界面和易用性测试 风格、样式、颜色是否协调 界面布局是否整齐、协调（保证全部显示出来的，尽量不要使用滚动条） 界面操作、标题描述是否恰当（描述有歧义、注意是否有错别字） 操作是否符合人们的常规习惯（有没有把相似的功能的控件放在一起，方便操作） 提示界面是否符合规范（不应该显示英文的cancel、ok，应该显示中文的确定等） 界面中各个控件是否对齐 日期控件是否可编辑 日期控件的长度是否合理，以修改时可以把时间全部显示出来为准 查询结果列表列宽是否合理、标签描述是否合理 查询结果列表太宽没有横向滚动提示 对于信息比较长的文本，文本框有没有提供自动竖直滚动条 数据录入控件是否方便 有没有支持Tab键，键的顺序要有条理，不乱跳 有没有提供相关的热键 控件的提示语描述是否正确 模块调用是否统一，相同的模块是否调用同一个界面 用滚动条移动页面时，页面的控件是否显示正常 日期的正确格式应该是XXXX-XX-XX或XXXX-XX-XX XX:XX:XX 页面是否有多余按钮或标签 窗口标题或图标是否与菜单栏的统一 窗口的最大化、最小化是否能正确切换 对于正常的功能，用户可以不必阅读用户手册就能使用 执行风险操作时，有确认、删除等提示吗 操作顺序是否合理 正确性检查：检查页面上的form, button, table, header, footer,提示信息，还有其他文字拼写，句子的语法等是否正确。 系统应该在用户执行错误的操作之前提出警告，提示信息. 页面分辨率检查，在各种分辨率浏览系统检查系统界面友好性。 合理性检查：做delete, update, add, cancel, back等操作后，查看信息回到的页面是否合理。 检查本地化是否通过：英文版不应该有中文信息，英文翻译准确，专业。 兼容性测试 兼容性测试不只是指界面在不同操作系统或浏览器下的兼容，有些功能方面的测试，也要考虑到兼容性，包括操作系统兼容和应用软件兼容，可能还包括硬件兼容。比如涉及到ajax、jquery、javascript等技术的，都要考虑到不同浏览器下的兼容性问题 链接测试 主要是保证链接的可用性和正确性，它也是网站测试中比较重要的一个方面。可以使用特定的工具如XENU来进行链接测试。 导航测试导航描述了用户在一个页面内操作的方式，在不同的用户接口控制之间，例如按钮、对话框、列表和窗口等；或在不同的连接页面之间。通过考虑下列问题，可以决定一个Web应用系统是否易于导航：导航是否直观？Web系统的主要部分是否可通过主页存取？Web系统是否需要站点地图、搜索引擎或其他的导航帮助？在一个页面上放太多的信息往往起到与预期相反的效果。Web应用系统的用户趋向于目的驱动，很快地扫描一个Web应用系统，看是否有满足自己需要的信息，如果没有，就会很快地离开。很少有用户愿意花时间去熟悉Web应用系统的结构，因此，Web应用系统导航帮助要尽可能地准确。导航的另一个重要方面是Web应用系统的页面结构、导航、菜单、连接的风格是否一致。确保用户凭直觉就知道Web应用系统里面是否还有内容，内容在什么地方。Web应用系统的层次一旦决定，就要着手测试用户导航功能，让最终用户参与这种测试，效果将更加明显。 图形测试在Web应用系统中，适当的图片和动画既能起到广告宣传的作用，又能起到美化页面的功能。一个Web应用系统的图形可以包括图片、动画、边框、颜色、字体、背景、按钮等。图形测试的内容有： 要确保图形有明确的用途，图片或动画不要胡乱地堆在一起，以免浪费传输时间。Web应用系统的图片尺寸要尽量地小，并且要能清楚地说明某件事情，一般都链接到某个具体的页面。 验证所有页面字体的风格是否一致。 背景颜色应该与字体颜色和前景颜色相搭配。 图片的大小和质量也是一个很重要的因素，一般采用JPG或GIF压缩，最好能使图片的大小减小到30k以下 最后，需要验证的是文字回绕是否正确。如果说明文字指向右边的图片，应该确保该图片出现在右边。不要因为使用图片而使窗口和段落排列古怪或者出现孤行。 通常来说，使用少许或尽量不使用背景是个不错的选择。如果您想用背景，那么最好使用单色的，和导航条一起放在页面的左边。另外，图案和图片可能会转移用户的注意力。 业务流程测试 业务流程，一般会涉及到多个模块的数据，所以在对业务流程测试时，首先要保证单个模块功能的正确性，其次就要对各个模块间传递的数据进行测试，这往往是容易出现问题的地方，测试时一定要设计不同的数据进行测试。 安全性测试 SQL注入（比如登陆页面） XSS跨网站脚本攻击：程序或数据库没有对一些特殊字符进行过滤或处理，导致用户所输入的一些破坏性的脚本语句能够直接写进数据库中，浏览器会直接执行这些脚本语句，破坏网站的正常显示，或网站用户的信息被盗,构造脚本语句时，要保证脚本的完整性。 document.write(“abc”) \alter(“abc”)\ URL地址后面随便输入一些符号，并尽量是动态参数靠后 验证码更新问题 现在的Web应用系统基本采用先注册，后登陆的方式。因此，必须测试有效和无效的用户名和密码，要注意到是否大小写敏感，可以试多少次的限制，是否可以不登陆而直接浏览某个页面等。 Web应用系统是否有超时的限制，也就是说，用户登陆后在一定时间内（例如15分钟）没有点击任何页面，是否需要重新登陆才能正常使用。 为了保证Web应用系统的安全性，日志文件是至关重要的。需要测试相关信息是否写进了日志文件、是否可追踪。 当使用了安全套接字时，还要测试加密是否正确，检查信息的完整性。 服务器端的脚本常常构成安全漏洞，这些漏洞又常常被黑客利用。所以，还要测试没有经过授权，就不能在服务器端放置和编辑脚本的问题。 性能测试连接速度测试用户连接到Web应用系统的速度根据上网方式的变化而变化，他们或许是电话拨号，或是宽带上网。当下载一个程序时，用户可以等较长的时间，但如果仅仅访问一个页面就不会这样。如果Web系统响应时间太长（例如超过5秒钟），用户就会因没有耐心等待而离开。 另外，有些页面有超时的限制，如果响应速度太慢，用户可能还没来得及浏览内容，就需要重新登陆了。而且，连接速度太慢，还可能引起数据丢失，使用户得不到真实的页面。 负载测试负载测试是为了测量Web系统在某一负载级别上的性能，以保证Web系统在需求范围内能正常工作。负载级别可以是某个时刻同时访问Web系统的用户数量，也可以是在线数据处理的数量。例如：Web应用系统能允许多少个用户同时在线？如果超过了这个数量，会出现什么现象？Web应用系统能否处理大量用户对同一个页面的请求？ 压力测试负载测试应该安排在Web系统发布以后，在实际的网络环境中进行测试。因为一个企业内部员工，特别是项目组人员总是有限的，而一个Web系统能同时处理的请求数量将远远超出这个限度，所以，只有放在Internet上，接受负载测试，其结果才是正确可信的。进行压力测试是指实际破坏一个Web应用系统，测试系统的反映。压力测试是测试系统的限制和故障恢复能力，也就是测试Web应用系统会不会崩溃，在什么情况下会崩溃。黑客常常提供错误的数据负载，直到Web应用系统崩溃，接着当系统重新启动时获得存取权。压力测试的区域包括表单、登陆和其他信息传输页面等。 备注(负载/压力测试应该关注什么) 测试需要验证系统能否在同一时间响应大量的用户，在用户传送大量数据的时候能否响应，系统能否长时间运行。可访问性对用户来说是极其重要的。如果用户得到“系统忙”的信息，他们可能放弃，并转向竞争对手。系统检测不仅要使用户能够正常访问站点，在很多情况下，可能会有黑客试图通过发送大量数据包来攻击服务器。出于安全的原因，测试人员应该知道当系统过载时，需要采取哪些措施，而不是简单地提升系统性能。 瞬间访问高峰 如果您的站点用于公布彩票的抽奖结果，最好使系统在中奖号码公布后的一段时间内能够响应上百万的请求。负载测试工具能够模拟X个用户同时访问测试站点。 每个用户传送大量数据 网上书店的多数用户可能只订购1-5书，但是大学书店可能会订购5000本有关心理学介绍的课本?或者一个祖母为她的50个儿孙购买圣诞礼物(当然每个孩子都有自己的邮件地址)系统能处理单个用户的大量数据吗? 长时间的使用 如果站点用于处理鲜花订单，那么至少希望它在母亲节前的一周内能持续运行。如果站点提供基于web的email服务，那么点最好能持续运行几个月，甚至几年。可能需要使用自动测试工具来完成这种类型的测试，因为很难通过手工完成这些测试。你可以想象组织100个人同时点击某个站点。但是同时组织100000个人呢。通常，测试工具在第二次使用的时候，它创造的效益，就足以支付成本。而且，测试工具安装完成之后，再次使用的时候，只要点击几下。采取措施：采用性能测试工具WAS、ACT，LR等协助进行测试 测试中应该注意的其他情况 在测试时，与网络有关的步骤或者模块必须考虑到断网的情况 每个页面都有相应的Title，不能为空，或者显示“无标题页” 在测试的时候要考虑到页面出现滚动条时，滚动条上下滚动时，页面是否正常 URL不区分大小写，大小写不敏感 对于电子商务网站，当用户并发购买数量大于库存的数量时，系统如何处理 测试数据避免单纯输入“123”、“abc“之类的，让测试数据尽量接近实际 进行测试时，尽量不要用超级管理员进行测试，用新建的用户进行测试。测试人员尽量不要使用同一个用户进行测试 提示信息：提示信息是否完整、正确、详细 帮助信息：是否提供帮助信息，帮助信息的表现形式（页面文字、提示信息、帮助文件），帮助信息是否正确、详细 可扩展性：是否由升级的余地，是否保留了接口 稳定性：运行所需的软硬件配置，占用资源情况，出现问题时的容错性，对数据的保护 运行速度：运行的快慢，带宽占用情况]]></content>
      <categories>
        <category>软件测试</category>
        <category>测试基础</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pip使用手册]]></title>
    <url>%2F2017%2F10%2Fpip%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C%2F</url>
    <content type="text"><![CDATA[pip安装包123$ pip install SomePackage [...] Successfully installed SomePackage 安装本地包 123$ pip install SomePackage-1.0-py2.py3-none-any.whl [...] Successfully installed SomePackage 版本控制 123$ pip install SomePackage # latest version$ pip install SomePackage==1.0.4 # specific version$ pip install 'SomePackage&gt;=1.0.4' # minimum version 通过wheel安装 1pip install SomePackage-1.0-py2.py3-none-any.whl 本地安装wheel包12345678#To build wheels for your requirements and all their dependencies to a local directory:$ pip install wheel$ pip wheel --wheel-dir=/local/wheels -r requirements.txt#And *then* to install those requirements just using your local directory of wheels (and not from PyPI):$ pip install --no-index --find-links=/local/wheels -r requirements.txt 安装特定的源文件 12$ pip install ./downloads/SomePackage-1.0.4.tar.gz$ pip install http://my.package.repo/SomePackage-1.0.4.zip 安装git源 1234567$ pip install -e git+https://git.repo/some_pkg.git#egg=SomePackage # from git$ pip install -e svn+svn://svn.repo/some_pkg/trunk/#egg=SomePackage # from svn$ pip install -e git+https://git.repo/some_pkg.git@feature#egg=SomePackage # from 'feature' branch$ pip install -e "git+https://git.repo/some_repo.git#egg=subdir&amp;subdirectory=subdir_path" # install a python package from a repo subdirectory pip列出已安装的包12345$ pip listdocutils (0.9.1)Jinja2 (2.6)Pygments (1.5)Sphinx (1.1.2) pip列出待更新的包12$ pip list --outdated SomePackage (Current: 1.0 Latest: 2.0) pip查看包信息1234567$ pip show --files SomePackage Name: SomePackage Version: 1.0 Location: /my/env/lib/pythonx.x/site-packages Files: ../somepackage/__init__.py [...] pip升级包1234567$ pip install --upgrade SomePackage [...] Found existing installation: SomePackage 1.0 Uninstalling SomePackage: Successfully uninstalled SomePackage Running setup.py install for SomePackage Successfully installed SomePackage pip卸载包12345$ pip uninstall SomePackage Uninstalling SomePackage: /my/env/lib/pythonx.x/site-packages/somepackage Proceed (y/n)? y Successfully uninstalled SomePackage pip参数解释Usage 1pip &lt;command&gt; [options] Commands 说明 install 安装 download 从PyPI、VCS、本地..安装包 uninstall 卸载 freeze 按着规定格式列出已安装包 list 列出已安装包，包括可编辑的 show 显示包详细信息 search 搜索 wheel 按照你的要求和依赖造轮子 hash 计算本地包归档时的hash值 General Options 说明 -h, –help 显示帮助 -v, –verbose 详细信息 -V, –version 当前版本 -q, –quiet 简略信息 –log &lt;path&gt; 添加详细信息的路径 –proxy &lt;proxy&gt; 代理 [user:passwd@]proxy.server:port –retries &lt;retries&gt; 重新连接（默认5次） –timeout &lt;sec&gt; 连接超时时间 (默认15秒) –exists-action &lt;action&gt; 当路径已存在时默认的操作: (s)witch, (i)gnore, (w)ipe, (b)ackup,(a)bort –cert &lt;path&gt; 证书 –cache-dir &lt;dir&gt; 缓存路径 –no-cache-dir 取消缓存路径 –trusted-host &lt;hostname&gt; 添加信任的网址 国内源阿里云 http://mirrors.aliyun.com/pypi/simple/ 中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/ 豆瓣(douban) http://pypi.douban.com/simple/ 清华大学 https://pypi.tuna.tsinghua.edu.cn/simple/ 中国科学技术大学 http://pypi.mirrors.ustc.edu.cn/simple/ 例：sudo easy_install -i http://pypi.douban.com/simple/ saltTesting]]></content>
      <categories>
        <category>开发</category>
        <category>Py系列</category>
        <category>pip</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jmeter学习笔记]]></title>
    <url>%2F2017%2F10%2FJmeter%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[Aggregate Report For each request, it totals the response information and provides request count, min, max, average, error rate, approximate throughput (request/second) and Kilobytes per second throughput. 对于每个请求，它总计响应信息，并提供请求计数，最小值，最大值，平均值，错误率，近似吞吐量（请求/秒）和每秒千字节吞吐量。 列标题 含义 Label 样品的标签 # Samples 具有相同标签的样本数 Average 一组结果的平均时间 Median 一组结果中间的时间 90% Line 90％的样品不超过这个时间 95% Line 95％的样品不超过这个时间 99% Line 99％的样品不超过这个时间 Min 具有相同标签的样品的最短时间 Max 具有相同标签的样品的最长时间 Error % 错误请求的百分比 Throughput 吞吐量(每秒、分、时请求数) Received KB/sec 每秒接收字节数 Sent KB/sec 每秒传输字节数 元件的执行顺序测试计划中的元件按照如下顺序执行。 配置元件（config elements ） 前置处理程序（Per-processors） 定时器（timers ） 取样器（Sampler） 后置处理程序（Post-processors） （除非Sampler 得到的返回结果为空）。 断言（Assertions）（除非Sampler 得到的返回结果为空）。 监听器（Listeners）（除非Sampler 得到的返回结果为空）。 常见接口测试工具 典型商业工具： loadrunner,soapui 典型开源工具: jmeter jsoup httpclient python中的urllib2,urllib库 扩展插件： Poster、 POSTMAN 接口测试与抓包 协议原理 协议捕获（Firebug、 fiddler、 Httpwatch） 协议变更 (Poster、 PostMan、 HttpRequest、 Temper Data） http抓包： HTTP Analyzer 通用数据抓包： MiniSniffer 进程级抓包： WSExplorer Bean Shell常用内置变量JMeter在它的BeanShell中内置了变量，用户可以通过这些变量与JMeter进行交互，其中主要的变量及其使用方法如下: log：写入信息到jmeber.log文件，使用方法：is log info!”);```12345678910- **ctx**：该变量引用了当前线程的上下文，使用方法可参考：[org.apache.jmeter.threads.JMeterContext](http://jmeter.apache.org/api/org/apache/jmeter/threads/JMeterContext.html)。- **vars** - (JMeterVariables)：操作jmeter变量，这个变量实际引用了JMeter线程中的局部变量容器（本质上是Map），它是测试用例与BeanShell交互的桥梁，常用方法： - ```vars.get(String key)```：从jmeter中获得变量值 - ```vars.put(String key，String value)```：数据存到jmeter变量中更多方法可参考：[org.apache.jmeter.threads.JMeterVariables](http://jmeter.apache.org/api/org/apache/jmeter/threads/JMeterVariables.html)- **props** - (JMeterProperties - class java.util.Properties)：操作jmeter属性，该变量引用了JMeter的配置信息，可以获取Jmeter的属性，它的使用方法与vars类似，但是只能put进去String类型的值，而不能是一个对象。对应于java.util.Properties。 - ```props.get(&quot;START.HMS&quot;);```注：START.HMS为属性名，在文件jmeter.properties中定 - ```props.put(&quot;PROP1&quot;,&quot;1234&quot;); prev - (SampleResult)：获取前面的sample返回的信息，常用方法： getResponseDataAsString()：获取响应信息 getResponseCode() ：获取响应code 更多方法可参考：org.apache.jmeter.samplers.SampleResult sampler - (Sampler)：gives access to the current sampler 性能测试类型 基准测试：在给系统施加较低压力时，查看系统的运行状况并记录相关数做为基础参考 负载测试：是指对系统不断地增加压力或增加一定压力下的持续时间，直到系统的某项或多项性能指标达到安全临界值，例如某种资源已经达到饱和状态等 。 压力测试：压力测试是评估系统处于或超过预期负载时系统的运行情况，关注点在于系统在峰值负载或超出最大载荷情况下的处理能力。 稳定性测试：在给系统加载一定业务压力的情况下，使系统运行一段时间，以此检测系统是否稳定。 并发测试：测试多个用户同时访问同一个应用、同一个模块或者数据记录时是否存在死锁或者其他性能问题。]]></content>
      <categories>
        <category>软件测试</category>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cookie和session找不同]]></title>
    <url>%2F2017%2F10%2Fcookie%E5%92%8Csession%E6%89%BE%E4%B8%8D%E5%90%8C%2F</url>
    <content type="text"><![CDATA[二者的定义：当你在浏览网站的时候，WEB 服务器会先送一小小资料放在你的计算机上，Cookie 会帮你在网站上所打的文字或是一些选择，都纪录下来。当下次你再光临同一个网站，WEB 服务器会先看看有没有它上次留下的 Cookie 资料，有的话，就会依据 Cookie里的内容来判断使用者，送出特定的网页内容你。 Cookie 的使用很普遍，许多有提供个人化服务的网站，都是利用 Cookie来辨认使用者，以方便送出使用者量身定做的内容，像是 Web 接口的免费 email 网站，都要用到 Cookie。 具体来说cookie机制采用的是在客户端保持状态的方案，而session机制采用的是在服务器端保持状态的方案。 同时我们也看到，由于采用服务器端保持状态的方案在客户端也需要保存一个标识，所以session机制可能需要借助于cookie机制来达到保存标识的目的，但实际上它还有其他选择。 cookie机制正统的cookie分发是通过扩展HTTP协议来实现的，服务器通过在HTTP的响应头中加上一行特殊的指示以提示浏览器按照指示生成相应的cookie。然而纯粹的客户端脚本如JavaScript或者VBScript也可以生成cookie。而cookie的使用是由浏览器按照一定的原则在后台自动发送给服务器的。浏览器检查所有存储的cookie，如果某个cookie所声明的作用范围大于等于将要请求的资源所在的位置，则把该cookie附在请求资源的HTTP请求头上发送给服务器。 cookie的内容主要包括：名字，值，过期时间，路径和域。路径与域一起构成cookie的作用范围。若不设置过期时间，则表示这个cookie的生命期为浏览器会话期间，关闭浏览器窗口，cookie就消失。这种生命期为浏览器会话期的cookie被称为会话cookie。 会话cookie一般不存储在硬盘上而是保存在内存里，当然这种行为并不是规范规定的。若设置了过期时间，浏览器就会把cookie保存到硬盘上，关闭后再次打开浏览器，这些cookie仍然有效直到超过设定的过期时间。存储在硬盘上的cookie可以在不同的浏览器进程间共享，比如两个IE窗口。而对于保存在内存里的cookie，不同的浏览器有不同的处理方式。 session机制session机制是一种服务器端的机制，服务器使用一种类似于散列表的结构（也可能就是使用散列表）来保存信息。 当程序需要为某个客户端的请求创建一个session时，服务器首先检查这个客户端的请求里是否已包含了一个session标识（称为session id），如果已包含则说明以前已经为此客户端创建过session，服务器就按照session id把这个session检索出来使用（检索不到，会新建一个），如果客户端请求不包含session id，则为此客户端创建一个session并且生成一个与此session相关联的session id，session id的值应该是一个既不会重复，又不容易被找到规律以仿造的字符串，这个session id将被在本次响应中返回给客户端保存。保存这个session id的方式可以采用cookie，这样在交互过程中浏览器可以自动的按照规则把这个标识发送给服务器。一般这个cookie的名字都是类似于SEEESIONID。但cookie可以被人为的禁止，则必须有其他机制以便在cookie被禁止时仍然能够把session id传递回服务器。 url重写经常被使用的一种技术叫做URL重写，就是把session id直接附加在URL路径的后面。还有一种技术叫做表单隐藏字段。就是服务器会自动修改表单，添加一个隐藏字段，以便在表单提交时能够把session id传递回服务器。比如： 1234567&lt;form name="testform" action="/xxx"&gt; &lt;input type="hidden" name="jsessionid" value="ByOK3vjFD75aPnrF7C2HmdnV6QZcEbzWoWiBYEnLerjQ99zWpBng!-145788764"&gt; &lt;input type="text"&gt; &lt;/form&gt; 实际上这种技术可以简单的用对action应用URL重写来代替。 区别 cookie数据存放在客户的浏览器上，session数据放在服务器上。 cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗，考虑到安全应当使用session。 session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能，考虑到减轻服务器性能方面，应当使用COOKIE。 单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。 所以个人建议： 将登陆信息等重要信息存放为SESSION 其他信息如果需要保留，可以放在COOKIE中]]></content>
      <categories>
        <category>网络通信</category>
        <category>diff</category>
        <category>cookie&amp;session</category>
      </categories>
      <tags>
        <tag>dev</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RF Getting Started]]></title>
    <url>%2F2017%2F10%2FRF-Getting-Started%2F</url>
    <content type="text"><![CDATA[基本配置python2.7 : 目前robot framework的工具和Lib对python3.x版本支持不是很完善，基本上使用python2.7版本。 wxPython : 安装RIDE所必须的库，注意版本对应，目前最好的支持是wxpython2.8.12.1 ，使用pip安装的最新版不能兼容，且记得选unicode版本。 robot framework : 直接用pip安装挺方便的pip install robotframework robotframework-ride : 图形管理界面，同样pip安装pip install robotframework-ride robotframework-selenium2library : 装了这个库，基本就可以跑UI测试了pip install robotframework-selenium2library 备注若安装RobotFramework-ride没有自动创建桌面快捷方式，我们要么命令行走起，要么自己搞个快捷方式。命令行 ： WIN+r 输入cmd回车进入命令行，cd到对应目录下，例：cd C:\Python27\Scripts，然后敲python ride.py来打开。若是配置好了环境变量，直接命令行输入ride.py 就启动起来了。 如果ride启动失败了，可以用管理员的身份试一试。 快捷方式 ： 桌面鼠标右键，选择创建快捷方式，在弹窗中选择pythonw.exe再在其后输入-c &quot;from robotide import main;main()“，这时输入框中的内容应该类似这样C:\Python27\pythonw.exe -c &quot;from robotide import main; main()&quot; 。点击下一步，改个你喜欢的名字，我比较喜欢正规点的”RIDE”，这样完成后就能从桌面进入了。 同样，若是启动失败了。右键快捷方式选择属性，在高级中勾选用管理员的身份运行 。 若安装wxPython失败，查看一下版本是否是对应的版本，我这边因为是通过conda安装的，所以安装wxPython的时候一直提示没有找到python2.7的注册信息。这是因为在安装miniconda时没有勾选将miniconda以python2.7默认注册到系统。 1pip install -U robotframework-databaselibrary]]></content>
      <categories>
        <category>软件测试</category>
        <category>robot framework</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Raspbbery Pi 使用手册]]></title>
    <url>%2F2017%2F10%2FRaspbbery-Pi-%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C%2F</url>
    <content type="text"><![CDATA[注：推荐裸板，自己动手丰衣足食。官方文档 购买配置最小可选 树莓派板子必选 (选最新最便宜的) SD卡必选 建议容量8G以上(起码也买个16G的吧)，TF卡又叫micro SD卡，现在一般都用TF卡 读卡器必选 如果有别的方式烧录可以不买，比如说买的烧录好的(不推荐) 网线 推荐 尤其是在没显示屏的情况下，当然设置好wifi连接后就没必要了 电源 推荐听说树莓派最佳电源是2A，一般的安卓手机电源满足不了 其他可选 散热片 推荐 通常3片装 保护壳 推荐 风扇 可选 HDMI / DVI显示屏 可选 买不起显示屏，通过电脑wifi远程连接 视频线及转接口 可选 鼠标、键盘等 可选 我的使用环境是笔记本win10加wifi远程连接，所以买的是：板子、TF卡、读卡器、电源、散热片、保护壳及网线 提示：连接上树莓派后关机不建议热插拔，命令行sudo poweroff 烧录篇 下载系统，推荐下载raspbian系统。有DESKTOP 桌面版和LITE 最简安装。 Windows系统，下载烧录软件Win32DiskImager然后把TF卡插入读卡器，选好Image File和Device直接点Write就行了，其它选项可以忽略。 注 :重新烧录的情况下不要写入boot盘。 重点 烧录完成后，打开名为boot 的盘符，创建一个名为ssh的文件夹。 这里是因为截至2016年11月发布的版本，默认情况下，Raspbian已禁用SSH服务器。 TF卡插入树莓派，网线 连接路由器，接通电源，红灯常亮就表示OK了 (注意：这里pi还没有设置WIFI连接，没有网线是不行滴，除非你有显示屏可以连接使用) 查找树莓派IP地址，不推荐端口扫描软件 笔记本按WIN+R键输入CMD回车，在命令行输入arp -a 。 这时候一般会有两个IP，不确定的话，可以再输ipconfig查看本机IP，那另一个就是树莓派的IP了。 再不然，拔了树莓派的网线，输arp -a少了的那个就是树莓派的IP了。 查看路由器的客户端列表。我是小米路由器，手机上点开小米WiFi一目了然。 知道树莓派的IP后，就可以使用SSH连接了。使用PuTTY 、xshell 等都可以。这里使用免费的PuTTY ，连接上后，账号默认是pi，密码默认是raspberry (centos7 默认账号：root，密码:centos)。登录成功后会看到命令行提示符 pi@raspberrypi ~ $ 设置篇设置WIFI命令行设置WIFI 获取可连接的网络sudo iwlist wlan0 scan 注：很多时候附近可连接的网络比较多，建议指令存储到某个临时文件中 生成加密连接wpa_passphrase &quot;testing&quot; &quot;testingPassword&quot; 复制加密连接内容至sudo nano /etc/wpa_supplicant/wpa_supplicant.conf 123wpa_passphrase "testing" "testingPassword" &gt;&gt; /etc/wpa_supplicant/wpa_supplicant.conf# 上面那个命令需要root权限，用下面那个wpa_passphrase "testing" "testingPassword" | sudo tee -a /etc/wpa_supplicant/wpa_supplicant.conf &gt; /dev/null 这时文件中内容大概是这样： 12345network=&#123; ssid="testing" #连接的WIFI名称 #psk="testingPassword" #连接的WIFI密码 psk=131e1e221f6e06e3911a2d11ff2fac9182665c004de85300f9cac208a6a80531 &#125; 注释部分可自行删除 查看是否连接完成，先让配置生效sudo wpa_cli reconfigure ，输入ifconfig wlan0 可查看wifi的连接(连网线的情况下是查看不了滴)。 多网络连接 修改配置sudo nano /etc/wpa_supplicant/wpa_supplicant.conf 12345678910111213network=&#123; ssid="HomeOneSSID" psk="passwordOne" priority=1 #优先级 id_str="homeOne" #连接标识&#125;network=&#123; ssid="HomeTwoSSID" psk="passwordTwo" priority=2 id_str="homeTwo"&#125; 注： 设置完成后重启即可，也可以等配置完了再重启连接，注意WIFI连接后IP地址可能会不同于有线连接的地址，需要重新设置连接的IP。 设置静态IP地址 sudo vim /etc/dhcpcd.conf 登录配置工具在SSH控制台输入sudo raspi-config 注：一般来说第一步都是拓展系统空间，但是我进入配置工具时并没有这个选项(应该是新版已经默认拓展了)。然后找了找，原来在7 Advanced Options 中，我们选择ExpandFilesystem 更改密码(Change User Password) 密码是需要修改的，毕竟默认密码是公开的，所以这里我们选择Change User Password 按流程输入两次密码就OK了 注：激活root 在命令行界面输入sudo passwd root 输入两遍密码后，再在命令行输sudo passwd --unlock root ，root用户便可以使用了。 命令su - 输入设置的密码，便可切换为root用户。 本地化(Localisation Options) tips :键盘敲击选项的首字母可以快速定位到以该字母为首的选项旁。 时区本地化：Localisation Options –&gt;Change Timezone –&gt;Asia –&gt; shanghai wifi设置：Change Wi-fi Country –&gt;China 语言本地化：好好学英语，不设置。但是还是记录一下该怎么做。 首先获取中文字体，命令行sudo apt-get install ttf-wqy-zenhei ，然后命令sudo raspi-config 进入配置页面，选择Localisation Options -Change Locale 翻到最后一页再向上找zh_CN. UTF-8 敲空格 * 号标记选中后回车，再选择zh_CN，中文本地化设置就是这些步骤了。 VNC因为我使用的是LITE版没有桌面，所以略。。。(命令行用习惯了，桌面太多余) 启用VNC 服务器 先更新到最新版本的VNC Connect 12sudo apt-get updatesudo apt-get install realvnc-vnc-server realvnc-vnc-viewer 命令行输入sudo raspi-config ，找到Interfacing Options ，在VNC选项中enable 选yes 修改VNC配置文件 1sudo nano /etc/init.d/vncserver 12345678910111213141516171819202122232425262728293031323334353637#!/bin/sh### BEGIN INIT INFO# Provides: vncserver# Required-Start: $local_fs# Required-Stop: $local_fs# Default-Start: 2 3 4 5# Default-Stop: 0 1 6# Short-Description: Start/stop vncserver### END INIT INFO # More details see:# http://www.penguintutor.com/linux/vnc ### Customize this entry# Set the USER variable to the name of the user to start vncserver underexport USER='pi'### End customization required eval cd ~$USER case "$1" in start) # 启动命令行。此处自定义分辨率、控制台号码或其它参数。 su $USER -c '/usr/bin/vncserver -depth 16 -geometry 1024x768 :1' echo "Starting VNC server for $USER " ;; stop) # 终止命令行。此处控制台号码与启动一致。 su $USER -c '/usr/bin/vncserver -kill :1' echo "vncserver stopped" ;; *) echo "Usage: /etc/init.d/vncserver &#123;start|stop&#125;" exit 1 ;;esacexit 0 FTPsudo apt-get install vsftpd sudo service vsftpd start pure-ftpd 这是官方推荐的ftp server 配置VIM命令行sudo apt-get install -y vim 然后我很鸡贼的从github上拷贝了个星星数很高的vim配置文档上来 更换树莓派镜像源中国科学技术大学 http://mirrors.ustc.edu.cn/raspbian/raspbian/ 清华大学 http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ 大连东软信息学院源 http://mirrors.neusoft.edu.cn/raspbian/raspbian/ 重庆大学源 http://mirrors.cqu.edu.cn/Raspbian/raspbian/ 阿里云镜像 http://mirrors.aliyun.com/raspbian/raspbian/ 对应中国地图，一般离你家近的网速快些，嫌麻烦直接用阿里就行 二、树莓派修改软件源的方法 编辑/etc/apt/sources.list文件 sudo vim /etc/apt/sources.list。 原文内容 12deb http://archive.raspbian.org/raspbian/ stretch main contrib non-free rpideb-src http://archive.raspbian.org/raspbian/ stretch main contrib non-free rpi deb: Debian软件包格式的拓展名 deb-src: 软件包源码文件(一般不看源码此项可注释掉) 更改其连接为国内源即可，例 deb http://mirrors.aliyun.com/raspbian/raspbian/ stretch main contrib non-free rpi 编辑此文件后，命令行sudo apt-get update，更新软件列表。 安装node.js安装Node.js 6: 12curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -sudo apt-get install -y nodejs Alternatively, for Node.js 8: 12curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -sudo apt-get install -y nodejs Optional: install build tools To compile and install native addons from npm you may also need to install build tools: 1sudo apt-get install -y build-essential 安装gitgit官网 1sudo apt-get install git]]></content>
      <categories>
        <category>运维</category>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F10%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment 修改备注修改文章底部标签(#)修改模板/themes/next/layout/_macro/post.swig，搜索 rel=&quot;tag&quot;&gt;#，将 # 换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; 背景透明博客根目录 themes\next\source\css\_schemes\Pisces\_layout.styl这个文件的第65行background:删除掉 按钮背景 博客根目录 themes\next\source\css\_common\components\post\post-button.styl 第七行修改成background: transparent; 站点概况背景 博客根目录 themes\next\source\css\_schemes\Pisces\_sidebar.styl18行删除 菜单栏背景 next\source\css\_schemes\Pisces\_layout.styl 文件里.header-inner 这个选择器下的background 就是背景色 星空背景// 页面背景123456789101112@media screen and (min-width:1200px) &#123; body &#123; background-image: url(/images/background.jpg); background-repeat: no-repeat; background-attachment: fixed; background-position: 50% 50%; background-size: cover; &#125; #footer a &#123; color:#eee; &#125;&#125; 添加tag-cloud找到文件 next/layout/_macro/sidebar.swig, 然后添加如下内容。 123456789101112&#123;% if site.tags.length &gt; 1 %&#125;&lt;script type="text/javascript" charset="utf-8" src="/js/tagcloud.js"&gt;&lt;/script&gt;&lt;script type="text/javascript" charset="utf-8" src="/js/tagcanvas.js"&gt;&lt;/script&gt;&lt;div class="widget-wrap"&gt; &lt;h3 class="widget-title"&gt;Tag Cloud&lt;/h3&gt; &lt;div id="myCanvasContainer" class="widget tagcloud"&gt; &lt;canvas width="250" height="250" id="resCanvas" style="width=100%"&gt; &#123;&#123; list_tags() &#125;&#125; &lt;/canvas&gt; &lt;/div&gt;&lt;/div&gt;&#123;% endif %&#125; 添加DaoVoice需要注册DaoVoice的账号，注意注册后获取到的app_id，使用脚本需要用到 themes\next-reloaded\layout\_partials\head\custom-head.swig ，写下如下代码 123456789&#123;% if theme.daovoice %&#125; &lt;script&gt; (function(i,s,o,g,r,a,m)&#123;i["DaoVoiceObject"]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset="utf-8";m.parentNode.insertBefore(a,m)&#125;)(window,document,"script",('https:' == document.location.protocol ? 'https:' : 'http:') + "//widget.daovoice.io/widget/0f81ff2f.js","daovoice") daovoice('init', &#123; app_id: "&#123;&#123;theme.daovoice_app_id&#125;&#125;" &#125;); daovoice('update'); &lt;/script&gt;&#123;% endif %&#125;]]></content>
  </entry>
</search>
